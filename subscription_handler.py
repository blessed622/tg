# bot/handlers/subscription.py - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

from aiogram import types, F, Router, Dispatcher, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging

from bot.keyboards.main_menu import get_main_menu, get_subscription_menu
from config import OWNER_ID


async def check_subscription(user_id, db):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
    """
    try:
        async with db.connect() as conn:
            cursor = await conn.execute(
                '''
                SELECT * FROM subscriptions 
                WHERE user_id = ? AND is_active = 1 AND end_date > ?
                ''',
                (user_id, datetime.now().isoformat())
            )
            subscription = await cursor.fetchone()
        
        if subscription:
            return True, subscription
        return False, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False, None


async def get_subscription_info(message: types.Message | types.CallbackQuery, db, bot: Bot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        await message.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
        message = message.message
    
    user_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_active, subscription = await check_subscription(user_id, db)
    
    if is_active:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        end_date = datetime.fromisoformat(subscription['end_date'])
        days_left = (end_date - datetime.now()).days
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.connect() as conn:
            # –í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await conn.execute(
                'SELECT COUNT(*) as count FROM tasks WHERE user_id = ?',
                (user_id,)
            )
            tasks_count = (await cursor.fetchone())['count']
            
            # –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor = await conn.execute(
                'SELECT SUM(execution_count) as count FROM tasks WHERE user_id = ?',
                (user_id,)
            )
            result = await cursor.fetchone()
            sent_messages = result['count'] if result['count'] is not None else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        max_tasks = 20  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription['subscription_type'] == 'premium':
            max_tasks = 50
        elif subscription['subscription_type'] == 'business':
            max_tasks = 100
        
        await message.answer(
            f"üìå <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>:\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n\n"
            f"üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã</b>:\n"
            f"- –ó–∞–¥–∞—á: {tasks_count}/{max_tasks}\n"
            f"- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages}\n\n"
            f"üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
            parse_mode="HTML",
            reply_markup=get_subscription_menu()
        )
    else:
        await message.answer(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
            "üî• <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>:\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
            "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–æ—Ç 20 –¥–æ 999 —Å–µ–∫—É–Ω–¥)\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±—ã–µ –∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã –∏ —á–∞—Ç—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>: –≤—Å–µ–≥–æ 500‚ÇΩ/–º–µ—Å—è—Ü\n\n"
            "üì± –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @lovelymaxing",
            parse_mode="HTML",
            reply_markup=get_subscription_menu(show_extend=False)
        )


async def request_subscription(message: types.CallbackQuery, db, bot: Bot):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ/–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await message.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    await message.message.answer(
        "üì≤ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
        "üë®‚Äçüíª @lovelymaxing\n\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>: 500‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "üî• <b>–° –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ</b>:\n"
        "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞—Ä–∞–Ω–µ–µ\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç 20 –¥–æ 999 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º\n\n"
        "‚ö°Ô∏è –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
    try:
        await bot.send_message(
            OWNER_ID,
            f"üíº <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
            f"üÜî ID: {message.from_user.id}\n"
            f"üë§ Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")


async def add_subscription(message: types.Message, db, bot: Bot, duration_days=30):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞)
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        duration_days: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    if message.from_user.id != OWNER_ID:
        return
    
    # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_sub ID DAYS
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_sub ID [DAYS]")
        return
    
    try:
        user_id = int(parts[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        if len(parts) >= 3:
            duration_days = int(parts[2])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        is_active, subscription = await check_subscription(user_id, db)
        
        start_date = datetime.now()
        end_date = start_date + timedelta(days=duration_days)
        
        async with db.connect() as conn:
            if is_active:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                current_end_date = datetime.fromisoformat(subscription['end_date'])
                new_end_date = current_end_date + timedelta(days=duration_days)
                
                await conn.execute(
                    '''
                    UPDATE subscriptions 
                    SET end_date = ? 
                    WHERE id = ?
                    ''',
                    (new_end_date.isoformat(), subscription['id'])
                )
                action = "–ø—Ä–æ–¥–ª–µ–Ω–∞"
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                await conn.execute(
                    '''
                    INSERT INTO subscriptions 
                    (user_id, start_date, end_date, is_active, subscription_type) 
                    VALUES (?, ?, ?, 1, 'standard')
                    ''',
                    (user_id, start_date.isoformat(), end_date.isoformat())
                )
                action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            await conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
            f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {end_date.strftime('%d.%m.%Y')}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                user_id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {action}!</b>\n\n"
                f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {end_date.strftime('%d.%m.%Y')}\n"
                f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω–µ–π\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def register_subscription_handlers(dp: Dispatcher, db, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(lambda message: get_subscription_info(message, db, bot), Command("subscription"))
    dp.message.register(lambda message: add_subscription(message, db, bot), Command("add_sub"))
    
    # Callback –∑–∞–ø—Ä–æ—Å—ã
    dp.callback_query.register(lambda call: get_subscription_info(call, db, bot), F.data == "subscription:info")
    dp.callback_query.register(lambda call: request_subscription(call, db, bot), F.data == "subscription:request")
