# main.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN, OWNER_ID
from bot.dispatcher import setup_dispatcher
from database.db import Database
from scheduler.job_manager import JobManager
from utils.logger import setup_logger


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logger()
    logger = logging.getLogger(__name__)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    await db.init()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    job_manager = JobManager(db, scheduler)
    await job_manager.load_tasks()
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    setup_dispatcher(dp, db, job_manager, bot)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    try:
        await bot.send_message(OWNER_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info(f"–ë–æ—Ç @{(await bot.get_me()).username} –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


# config.py - –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

import os
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
BOT_TOKEN = "7753781602:AAHdjaiBwHhrGfo0bKObp9-zWb5Jg6-kIRY"
OWNER_ID = 6103389282

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.path.dirname(__file__), "database", "autopost.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π
SESSIONS_DIR = os.path.join(os.path.dirname(__file__), "sessions")
os.makedirs(SESSIONS_DIR, exist_ok=True)

# –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (API hash, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ—Ç –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
# –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–µ –Ω–∞–ø—Ä—è–º—É—é
ENCRYPTION_KEY = "your_encryption_key_here"  # –ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
DEFAULT_SUBSCRIPTION_DAYS = 30
SUBSCRIPTION_PRICE = "500 —Ä—É–±."
SUBSCRIPTION_CONTACT = "@lovelymaxing"

# –õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TASK_LIMIT = 20
DEFAULT_TASKS_PER_DAY = 100

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
DEFAULT_TEST_SUBSCRIPTION = datetime.now() + timedelta(days=3)


# database/db.py - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

import aiosqlite
import logging
import os
from config import DB_PATH

class Database:
    def __init__(self):
        self.db_path = DB_PATH
        self.logger = logging.getLogger(__name__)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        
    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        self.logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,  -- Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    username TEXT,           -- Username –≤ Telegram
                    first_name TEXT,         -- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    last_name TEXT,          -- –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    is_admin INTEGER DEFAULT 0,  -- –§–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (0 - –Ω–µ—Ç, 1 - –¥–∞)
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP   -- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                )
            ''')
            
            # –ü–æ–¥–ø–∏—Å–∫–∏
            await db.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,          -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    start_date TIMESTAMP,     -- –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                    end_date TIMESTAMP,       -- –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    is_active INTEGER DEFAULT 1,  -- –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ (0 - –Ω–µ—Ç, 1 - –¥–∞)
                    subscription_type TEXT DEFAULT 'standard',  -- –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
                    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
                )
            ''')
            
            # –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,          -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    api_id INTEGER,           -- API ID (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    api_hash TEXT,            -- API Hash (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    phone TEXT,               -- –¢–µ–ª–µ—Ñ–æ–Ω (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    session_file TEXT,        -- –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
                    is_active INTEGER DEFAULT 1,  -- –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è (0 - –Ω–µ—Ç, 1 - –¥–∞)
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   -- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
                )
            ''')
            
            # –ó–∞–¥–∞—á–∏
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,          -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    session_id INTEGER,       -- ID —Å–µ—Å—Å–∏–∏
                    task_type TEXT,           -- –¢–∏–ø –∑–∞–¥–∞—á–∏ (new_message/forward)
                    content TEXT,             -- –¢–µ–∫—Å—Ç –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                    source_chat_id INTEGER,   -- ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ (–¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏)
                    target_chat_id INTEGER,   -- ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
                    topic_id INTEGER DEFAULT NULL,  -- ID —Ç–æ–ø–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    schedule_type TEXT,       -- –¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (once/periodic)
                    schedule_time TIMESTAMP,  -- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    cron_expression TEXT,     -- Cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
                    is_active INTEGER DEFAULT 1,  -- –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ (0 - –Ω–µ—Ç, 1 - –¥–∞)
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    last_executed TIMESTAMP,  -- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    execution_count INTEGER DEFAULT 0,  -- –°—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
                    status TEXT DEFAULT 'pending',  -- –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
                    FOREIGN KEY (session_id) REFERENCES sessions (id) ON DELETE CASCADE
                )
            ''')
            
            # –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
            await db.execute('''
                CREATE TABLE IF NOT EXISTS task_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    task_id INTEGER,          -- ID –∑–∞–¥–∞—á–∏
                    execution_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    status TEXT,              -- –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (success/error)
                    message TEXT,             -- –°–æ–æ–±—â–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Å–ø–µ—Ö)
                    FOREIGN KEY (task_id) REFERENCES tasks (id) ON DELETE CASCADE
                )
            ''')
            
            await db.commit()
            
        self.logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.ensure_owner_exists()
            
    async def ensure_owner_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        from config import OWNER_ID
        
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü
            cursor = await db.execute('SELECT * FROM users WHERE id = ?', (OWNER_ID,))
            owner = await cursor.fetchone()
            
            if not owner:
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å ID {OWNER_ID}")
                
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
                await db.execute(
                    'INSERT INTO users (id, is_admin) VALUES (?, 1)',
                    (OWNER_ID,)
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–±–µ—Å—Å—Ä–æ—á–Ω—É—é)
                from datetime import datetime, timedelta
                start_date = datetime.now()
                end_date = start_date + timedelta(days=3650)  # ~10 –ª–µ—Ç
                
                await db.execute(
                    'INSERT INTO subscriptions (user_id, start_date, end_date, subscription_type) VALUES (?, ?, ?, ?)',
                    (OWNER_ID, start_date, end_date, 'owner')
                )
                
                await db.commit()
                self.logger.info(f"–ê–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.info(f"–ê–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
    async def get_user(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute('SELECT * FROM users WHERE id = ?', (user_id,))
            return await cursor.fetchone()
            
    async def add_user(self, user_id, username=None, first_name=None, last_name=None, is_admin=0):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                'INSERT OR IGNORE INTO users (id, username, first_name, last_name, is_admin) VALUES (?, ?, ?, ?, ?)',
                (user_id, username, first_name, last_name, is_admin)
            )
            await db.commit()
            
    async def update_user_activity(self, user_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from datetime import datetime
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                'UPDATE users SET last_active = ? WHERE id = ?',
                (datetime.now(), user_id)
            )
            await db.commit()
            
    async def get_subscription(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                'SELECT * FROM subscriptions WHERE user_id = ? ORDER BY end_date DESC LIMIT 1',
                (user_id,)
            )
            return await cursor.fetchone()
            
    async def add_subscription(self, user_id, start_date, end_date, subscription_type='standard'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                'INSERT INTO subscriptions (user_id, start_date, end_date, subscription_type) VALUES (?, ?, ?, ?)',
                (user_id, start_date, end_date, subscription_type)
            )
            await db.commit()
            
    async def is_subscription_active(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from datetime import datetime
        
        subscription = await self.get_subscription(user_id)
        if not subscription:
            return False
            
        return subscription['is_active'] == 1 and datetime.fromisoformat(subscription['end_date']) > datetime.now()
        
    async def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute('SELECT * FROM users ORDER BY created_at DESC')
            return await cursor.fetchall()


# bot/dispatcher.py - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

from aiogram import Dispatcher, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state

from bot.handlers.start import register_start_handler
from bot.handlers.auth import register_auth_handlers
from bot.handlers.subscription import register_subscription_handlers
from bot.handlers.tasks import register_task_handlers
from bot.handlers.admin import register_admin_handlers
from bot.middlewares import SubscriptionMiddleware, ActivityMiddleware, AdminMiddleware


# bot/middlewares.py - middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery


class SubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, db):
        self.db = db
        super().__init__()
        
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = event.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user = await self.db.get_user(user_id)
        if user and user['is_admin'] == 1:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
            return await handler(event, data)
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        has_subscription = await self.db.is_subscription_active(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ data
        data["has_subscription"] = has_subscription
        
        # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        allowed_commands = ["/start", "/help"]
        allowed_callbacks = ["auth:start", "menu:main"]
        
        if isinstance(event, Message):
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–Ω–æ–π –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if not has_subscription and event.text and event.text not in allowed_commands:
                from config import SUBSCRIPTION_CONTACT, SUBSCRIPTION_PRICE
                await event.answer(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} –≤ –º–µ—Å—è—Ü\n\n"
                    f"üì± –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: {SUBSCRIPTION_CONTACT}"
                )
                return
        
        elif isinstance(event, CallbackQuery):
            # –î–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–Ω–∏–º –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤
            if not has_subscription and not any(event.data.startswith(prefix) for prefix in allowed_callbacks):
                await event.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
                return
        
        return await handler(event, data)


class ActivityMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, db):
        self.db = db
        super().__init__()
        
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = event.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await self.db.update_user_activity(user_id)
        
        return await handler(event, data)


class AdminMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, db):
        self.db = db
        super().__init__()
        
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = event.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user = await self.db.get_user(user_id)
        is_admin = user and user['is_admin'] == 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ data
        data["is_admin"] = is_admin
        
        # –î–ª—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        admin_commands = ["/admin"]
        admin_callbacks = ["admin:"]
        
        if isinstance(event, Message) and event.text:
            if any(event.text.startswith(cmd) for cmd in admin_commands) and not is_admin:
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
        
        elif isinstance(event, CallbackQuery):
            if any(event.data.startswith(prefix) for prefix in admin_callbacks) and not is_admin:
                await event.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
                return
        
        return await handler(event, data)


def setup_dispatcher(dp: Dispatcher, db, job_manager, bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middlewares
    dp.message.middleware(ActivityMiddleware(db))
    dp.callback_query.middleware(ActivityMiddleware(db))
    
    dp.message.middleware(SubscriptionMiddleware(db))
    dp.callback_query.middleware(SubscriptionMiddleware(db))
    
    dp.message.middleware(AdminMiddleware(db))
    dp.callback_query.middleware(AdminMiddleware(db))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_start_handler(dp, db, bot)
    register_auth_handlers(dp, db, bot)
    register_subscription_handlers(dp, db, bot)
    register_task_handlers(dp, db, job_manager, bot)
    register_admin_handlers(dp, db, job_manager, bot)
    
    return dp


# bot/handlers/start.py - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

from aiogram import types, F, Router, Dispatcher, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from bot.keyboards.main_menu import get_main_menu
from datetime import datetime, timedelta


# bot/keyboards/main_menu.py - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    kb = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    kb.button(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="tasks:list")
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="tasks:create")
    kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile:view")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    kb.button(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth:start")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    
    # –†–∞—Å–ø–æ–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    kb.adjust(2)
    
    return kb.as_markup()


def get_task_menu(task_id=None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    kb = InlineKeyboardBuilder()
    
    if task_id:
        # –ú–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        kb.button(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"tasks:start:{task_id}")
        kb.button(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"tasks:stop:{task_id}")
        kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"tasks:edit:{task_id}")
        kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"tasks:delete:{task_id}")
        kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"tasks:stats:{task_id}")
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tasks:list")
        kb.adjust(2, 2, 2)
    else:
        # –û–±—â–µ–µ –º–µ–Ω—é –∑–∞–¥–∞—á
        kb.button(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="tasks:list:active")
        kb.button(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="tasks:list:all")
        kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="tasks:create")
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
        kb.adjust(2, 1, 1)
    
    return kb.as_markup()


def get_auth_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    kb = InlineKeyboardBuilder()
    
    kb.button(text="üîë –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", callback_data="auth:start")
    kb.button(text="üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="auth:status")
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="auth:refresh")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
    
    kb.adjust(1)
    
    return kb.as_markup()


async def start_command(message: types.Message, state: FSMContext, db, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    await db.add_user(user_id, username, first_name, last_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    subscription = await db.get_subscription(user_id)
    
    if subscription and await db.is_subscription_active(user_id):
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        end_date = datetime.fromisoformat(subscription['end_date'])
        days_left = (end_date - datetime.now()).days
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name or '—É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            f"üîì –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}.\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:"
        )
        
        await message.answer(welcome_text, reply_markup=get_main_menu())
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        from config import SUBSCRIPTION_PRICE, SUBSCRIPTION_CONTACT
        
        no_subscription_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name or '—É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE} –≤ –º–µ—Å—è—Ü\n\n"
            f"üîê –° –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
            f"‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª—é–±—ã–µ —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            f"üì± –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: {SUBSCRIPTION_CONTACT}"
        )
        
        await message.answer(no_subscription_text)


def register_start_handler(dp: Dispatcher, db, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    dp.message.register(lambda message, state: start_command(message, state, db, bot), CommandStart())