import os
import sys
import io
import logging
import asyncio
import json
import random
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.enums import ParseMode
from telethon import TelegramClient, errors
from telethon.tl.functions.channels import GetForumTopicsRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import ChatAdminRequiredError, ChannelPrivateError, FloodWaitError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("tg_poster_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "poster_config.json"
PHOTOS_DIR = "photos"
os.makedirs(PHOTOS_DIR, exist_ok=True)


class AuthStates(StatesGroup):
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()


class PosterStates(StatesGroup):
    main_menu = State()
    waiting_for_group_link = State()
    waiting_for_groups_list = State()
    selecting_topic = State()
    entering_message = State()
    uploading_photo = State()
    setting_interval = State()
    confirm_add = State()
    confirm_mass_add = State()


class TelegramPosterBot:
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        self.dp = Dispatcher(storage=MemoryStorage())
        self.telethon_client = None
        self.active_tasks = {}
        self.task_queue = asyncio.Queue()
        self.config = self.load_config()
        self.current_mass_data = {}
        self.register_handlers()

    def load_config(self) -> Dict:
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}", exc_info=True)
        return {"tasks": {}, "user_id": None, "notifications_enabled": True}

    def save_config(self) -> None:
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}", exc_info=True)

    async def create_telethon_client(self, api_id: int, api_hash: str, phone: str) -> bool:
        if self.telethon_client and self.telethon_client.is_connected():
            await self.telethon_client.disconnect()

        session_name = f"session_{phone}"
        self.telethon_client = TelegramClient(session_name, api_id, api_hash)

        try:
            await self.telethon_client.connect()

            if not await self.telethon_client.is_user_authorized():
                await self.telethon_client.send_code_request(phone)
                return False

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon: {e}", exc_info=True)
            return False

    async def start(self):
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á
        asyncio.create_task(self.task_worker())

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        for task_id, task_data in self.config.get('tasks', {}).items():
            if task_data.get('active', False):
                self.active_tasks[task_id] = True
                await self.task_queue.put((task_id, task_data))
                logger.info(f"–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á–∏ {task_id}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.config.get('user_id'):
            try:
                await self.bot.send_message(
                    self.config['user_id'],
                    "ü§ñ Telegram Poster Bot –∑–∞–ø—É—â–µ–Ω!",
                    reply_markup=self.get_main_menu_keyboard()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")

        await self.dp.start_polling(self.bot)

    def register_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        @self.dp.message(F.text == '/start')
        async def cmd_start(message: types.Message, state: FSMContext):
            if not self.config.get('user_id'):
                self.config['user_id'] = message.from_user.id
                self.save_config()

            if message.from_user.id != self.config.get('user_id'):
                await message.answer("üö´ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
                return

            if not self.telethon_client or not await self.telethon_client.is_user_authorized():
                await state.set_state(AuthStates.waiting_for_api_id)
                await message.answer(
                    "üîê –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org):"
                )
            else:
                await state.set_state(PosterStates.main_menu)
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Poster Bot!",
                    reply_markup=self.get_main_menu_keyboard()
                )

        @self.dp.message(AuthStates.waiting_for_api_id)
        async def process_api_id(message: types.Message, state: FSMContext):
            try:
                api_id = int(message.text)
                await state.update_data(api_id=api_id)
                await state.set_state(AuthStates.waiting_for_api_hash)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API HASH:")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID (—á–∏—Å–ª–æ):")

        @self.dp.message(AuthStates.waiting_for_api_hash)
        async def process_api_hash(message: types.Message, state: FSMContext):
            api_hash = message.text.strip()
            await state.update_data(api_hash=api_hash)
            await state.set_state(AuthStates.waiting_for_phone)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):")

        @self.dp.message(AuthStates.waiting_for_phone)
        async def process_phone(message: types.Message, state: FSMContext):
            phone = message.text.strip()
            user_data = await state.get_data()

            try:
                await state.update_data(phone=phone)

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not self.telethon_client or not self.telethon_client.is_connected():
                    session_name = f"session_{phone}"
                    self.telethon_client = TelegramClient(session_name, user_data['api_id'], user_data['api_hash'])
                    await self.telethon_client.connect()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
                if await self.telethon_client.is_user_authorized():
                    await state.set_state(PosterStates.main_menu)
                    await message.answer(
                        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
                        reply_markup=self.get_main_menu_keyboard()
                    )
                else:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash
                    code_request = await self.telethon_client.send_code_request(phone)
                    await state.update_data(phone_code_hash=code_request.phone_code_hash)

                    await state.set_state(AuthStates.waiting_for_code)
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
                await message.answer(
                    f"üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start"
                )

        @self.dp.callback_query(F.data == 'restart_auth')
        async def restart_auth(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            await state.clear()
            await state.set_state(AuthStates.waiting_for_api_id)
            await callback_query.message.answer(
                "üîê –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org):"
            )

        @self.dp.message(AuthStates.waiting_for_code)
        async def process_code(message: types.Message, state: FSMContext):
            code = message.text.strip()
            user_data = await state.get_data()

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å phone_code_hash –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if 'phone_code_hash' not in user_data:
                    await message.answer(
                        "‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–µ—à –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_auth")
                        ]])
                    )
                    return

                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –∏ —Ö–µ—à–∞
                await self.telethon_client.sign_in(
                    phone=user_data['phone'],
                    code=code,
                    phone_code_hash=user_data['phone_code_hash']
                )

                if await self.telethon_client.is_user_authorized():
                    await state.set_state(PosterStates.main_menu)
                    await message.answer(
                        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
                        reply_markup=self.get_main_menu_keyboard()
                    )
                else:
                    await message.answer("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
                    await state.clear()

            except errors.SessionPasswordNeededError:
                await state.set_state(AuthStates.waiting_for_password)
                await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")

            except errors.PhoneCodeExpiredError:
                logger.warning("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π...")
                try:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π phone_code_hash
                    code_request = await self.telethon_client.send_code_request(user_data['phone'])
                    await state.update_data(phone_code_hash=code_request.phone_code_hash)

                    await message.answer(
                        "üïí –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {e}")
                    await message.answer(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                    )
                    await state.clear()

            except errors.PhoneCodeInvalidError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥:")

            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}", exc_info=True)
                await message.answer(
                    f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                await state.clear()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        @self.dp.callback_query(F.data == 'add_task', PosterStates.main_menu)
        async def process_add_task(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ûï –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="single_task"),
                    InlineKeyboardButton(text="üìã –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="mass_task")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
            await state.set_state(PosterStates.waiting_for_group_link)
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
                reply_markup=markup
            )

        @self.dp.callback_query(F.data == 'single_task', PosterStates.waiting_for_group_link)
        async def process_single_task(callback_query: types.CallbackQuery):
            await callback_query.answer()
            await callback_query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã (–±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä: group_name)\n"
                "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã."
            )

        @self.dp.callback_query(F.data == 'mass_task', PosterStates.waiting_for_group_link)
        async def process_mass_task(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            await state.set_state(PosterStates.waiting_for_groups_list)
            await callback_query.message.answer(
                "üìã –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ @):\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "group1\n"
                "group2\n"
                "group3\n\n"
                "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 50 –≥—Ä—É–ø–ø –∑–∞ —Ä–∞–∑."
            )

        @self.dp.message(PosterStates.waiting_for_groups_list)
        async def process_groups_list(message: types.Message, state: FSMContext):
            groups = [g.strip() for g in message.text.split('\n') if g.strip()]

            if not groups:
                await message.answer("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            if len(groups) > 50:
                await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 50 –≥—Ä—É–ø–ø –∑–∞ —Ä–∞–∑. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50.")
                groups = groups[:50]

            await state.update_data(groups_list=groups)
            await state.set_state(PosterStates.entering_message)
            await message.answer(
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
            )

        @self.dp.message(PosterStates.waiting_for_group_link)
        async def process_group_link(message: types.Message, state: FSMContext):
            group_username = message.text.strip()
            if group_username.startswith('@'):
                group_username = group_username[1:]

            if not group_username:
                await message.answer("–ò–º—è –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                return

            await state.update_data(group_username=group_username)

            try:
                topics, error = await self.find_topics(group_username)

                if error or not topics:
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –ë–µ–∑ —Ç–æ–ø–∏–∫–∞", callback_data=f"no_topic_{group_username}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
                        ]
                    ])

                    await message.answer(
                        f"–í –≥—Ä—É–ø–ø–µ @{group_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞: {error}\n"
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ —Ç–æ–ø–∏–∫–∞?",
                        reply_markup=markup
                    )
                    return

                await state.set_state(PosterStates.selecting_topic)
                await message.answer(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤ –≤ @{group_username}. –í—ã–±–µ—Ä–∏—Ç–µ:",
                    reply_markup=self.get_topics_keyboard(topics)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤: {e}", exc_info=True)
                await message.answer(f"üö´ –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É.")

        @self.dp.callback_query(F.data.startswith('no_topic_'))
        async def process_no_topic(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            group_username = callback_query.data.replace('no_topic_', '')

            await state.update_data(
                group_username=group_username,
                topic_id=0,
                topic_name="–ë–µ–∑ —Ç–æ–ø–∏–∫–∞"
            )
            await state.set_state(PosterStates.entering_message)
            await callback_query.message.answer(
                f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ @{group_username} –±–µ–∑ —Ç–æ–ø–∏–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
            )

        @self.dp.callback_query(F.data.startswith('topic_'), PosterStates.selecting_topic)
        async def process_topic_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            _, topic_id, topic_name = callback_query.data.split('_', 2)

            await state.update_data(topic_id=int(topic_id), topic_name=topic_name)
            await state.set_state(PosterStates.entering_message)
            await callback_query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
            )

        @self.dp.message(PosterStates.entering_message)
        async def process_message_text(message: types.Message, state: FSMContext):
            await state.update_data(message=message.html_text)

            data = await state.get_data()
            if 'groups_list' in data:
                await state.set_state(PosterStates.setting_interval)
                await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö):\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º: 30 —Å–µ–∫—É–Ω–¥",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîÑ –ê–≤—Ç–æ (30-60 —Å–µ–∫)", callback_data="auto_interval")
                    ]])
                )
            else:
                await state.set_state(PosterStates.uploading_photo)
                await message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
                    ]])
                )

        @self.dp.callback_query(F.data == 'auto_interval', PosterStates.setting_interval)
        async def process_auto_interval(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            await state.update_data(interval=random.randint(30, 60))
            await self.confirm_mass_add(callback_query.from_user.id, state)

        @self.dp.message(PosterStates.setting_interval)
        async def process_interval(message: types.Message, state: FSMContext):
            try:
                interval = int(message.text.strip())
                if interval < 5:
                    await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 5 —Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 5.")
                    interval = 5
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
                return

            data = await state.get_data()
            if 'groups_list' in data:
                await state.update_data(interval=interval)
                await self.confirm_mass_add(message.from_user.id, state)
            else:
                await state.update_data(interval=interval)
                await self.confirm_single_add(message.from_user.id, state)

        async def confirm_mass_add(self, user_id: int, state: FSMContext):
            data = await state.get_data()
            groups_count = len(data['groups_list'])
            interval = data.get('interval', 30)
            total_time = (groups_count * interval) / 60

            confirm_text = (
                f"üìã <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á</b>\n\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {groups_count}\n"
                f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: {interval} —Å–µ–∫\n"
                f"üïí –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {total_time:.1f} –º–∏–Ω\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
                f"{data['message']}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ {groups_count} –∑–∞–¥–∞—á?"
            )

            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_mass_add"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mass_add")
                ]
            ])

            await state.set_state(PosterStates.confirm_mass_add)
            await self.bot.send_message(
                user_id,
                confirm_text,
                reply_markup=markup
            )

        @self.dp.callback_query(F.data == 'confirm_mass_add', PosterStates.confirm_mass_add)
        async def process_confirm_mass_add(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            data = await state.get_data()

            created_count = 0
            for group in data['groups_list']:
                try:
                    task_id = self.generate_task_id()
                    task_data = {
                        "group_username": group,
                        "topic_id": data.get('topic_id', 0),
                        "topic_name": data.get('topic_name', "–ë–µ–∑ —Ç–æ–ø–∏–∫–∞"),
                        "message": data['message'],
                        "photo_path": data.get('photo_path'),
                        "interval": data['interval'],
                        "active": True,
                        "last_posted": None
                    }

                    if 'tasks' not in self.config:
                        self.config['tasks'] = {}
                    self.config['tasks'][task_id] = task_data

                    self.active_tasks[task_id] = True
                    await self.task_queue.put((task_id, task_data))
                    created_count += 1

                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è @{group}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è @{group}: {e}", exc_info=True)

            self.save_config()
            await state.clear()
            await state.set_state(PosterStates.main_menu)

            await callback_query.message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count}/{len(data['groups_list'])} –∑–∞–¥–∞—á!",
                reply_markup=self.get_main_menu_keyboard()
            )

        @self.dp.callback_query(F.data == 'list_tasks')
        async def process_list_tasks(callback_query: types.CallbackQuery):
            await callback_query.answer()

            if not self.config.get('tasks'):
                await callback_query.message.answer(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            await callback_query.message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:",
                reply_markup=self.get_tasks_keyboard(self.config['tasks'])
            )

        @self.dp.callback_query(F.data.startswith('task_info_'))
        async def process_task_info(callback_query: types.CallbackQuery):
            await callback_query.answer()
            task_id = callback_query.data.replace('task_info_', '')

            if task_id not in self.config.get('tasks', {}):
                await callback_query.message.answer(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            task = self.config['tasks'][task_id]
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if self.active_tasks.get(task_id, False) else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

            msg = (
                f"üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ</b>\n\n"
                f"üë• <b>–ì—Ä—É–ø–ø–∞:</b> @{task['group_username']}\n"
                f"üìö <b>–¢–æ–ø–∏–∫:</b> {task['topic_name']}\n"
                f"üîÑ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {task['interval']} —Å–µ–∫\n"
                f"üîò <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"‚è± <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞:</b> {task.get('last_posted', '–µ—â–µ –Ω–µ –±—ã–ª–æ')}\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
                f"{task['message']}"
            )

            await callback_query.message.answer(
                msg,
                reply_markup=self.get_task_control_keyboard(task_id)
            )

        def get_task_control_keyboard(self, task_id: str) -> InlineKeyboardMarkup:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if self.active_tasks.get(task_id, False) else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                        callback_data=f"stop_task_{task_id}" if self.active_tasks.get(task_id, False) else f"start_task_{task_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"change_interval_{task_id}"),
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task_id}")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tasks")]
            ])
            return keyboard

        @self.dp.callback_query(F.data.startswith('start_task_'))
        async def process_start_task(callback_query: types.CallbackQuery):
            await callback_query.answer()
            task_id = callback_query.data.replace('start_task_', '')

            if task_id not in self.config.get('tasks', {}):
                await callback_query.message.answer(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            self.active_tasks[task_id] = True
            self.config['tasks'][task_id]['active'] = True
            self.save_config()

            await self.task_queue.put((task_id, self.config['tasks'][task_id]))

            await callback_query.message.answer(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è @{self.config['tasks'][task_id]['group_username']} –∑–∞–ø—É—â–µ–Ω–∞!",
                reply_markup=self.get_task_control_keyboard(task_id)
            )

        @self.dp.callback_query(F.data.startswith('stop_task_'))
        async def process_stop_task(callback_query: types.CallbackQuery):
            await callback_query.answer()
            task_id = callback_query.data.replace('stop_task_', '')

            if task_id not in self.config.get('tasks', {}):
                await callback_query.message.answer(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            self.active_tasks[task_id] = False
            self.config['tasks'][task_id]['active'] = False
            self.save_config()

            await callback_query.message.answer(
                f"‚èπ –ó–∞–¥–∞—á–∞ –¥–ª—è @{self.config['tasks'][task_id]['group_username']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
                reply_markup=self.get_task_control_keyboard(task_id)
            )

        @self.dp.callback_query(F.data.startswith('change_interval_'))
        async def process_change_interval(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            task_id = callback_query.data.replace('change_interval_', '')

            if task_id not in self.config.get('tasks', {}):
                await callback_query.message.answer(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            await state.update_data(task_id=task_id)
            await callback_query.message.answer(
                f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['tasks'][task_id]['interval']} —Å–µ–∫\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –º–∏–Ω–∏–º—É–º 5):"
            )

        @self.dp.message(F.text.regexp(r'^\d+$'))
        async def process_new_interval(message: types.Message, state: FSMContext):
            data = await state.get_data()
            if 'task_id' not in data:
                return

            try:
                new_interval = max(5, int(message.text))
                task_id = data['task_id']

                self.config['tasks'][task_id]['interval'] = new_interval
                self.save_config()

                await state.clear()
                await message.answer(
                    f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_interval} —Å–µ–∫",
                    reply_markup=self.get_task_control_keyboard(task_id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
                await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        @self.dp.callback_query(F.data.startswith('delete_task_'))
        async def process_delete_task(callback_query: types.CallbackQuery):
            await callback_query.answer()
            task_id = callback_query.data.replace('delete_task_', '')

            if task_id not in self.config.get('tasks', {}):
                await callback_query.message.answer(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{task_id}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"task_info_{task_id}")
                ]
            ])

            await callback_query.message.answer(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è @{self.config['tasks'][task_id]['group_username']}?",
                reply_markup=markup
            )

        @self.dp.callback_query(F.data.startswith('confirm_delete_'))
        async def process_confirm_delete(callback_query: types.CallbackQuery):
            await callback_query.answer()
            task_id = callback_query.data.replace('confirm_delete_', '')

            if task_id in self.config.get('tasks', {}):
                if 'photo_path' in self.config['tasks'][task_id]:
                    try:
                        os.remove(self.config['tasks'][task_id]['photo_path'])
                    except:
                        pass

                del self.config['tasks'][task_id]
                if task_id in self.active_tasks:
                    del self.active_tasks[task_id]
                self.save_config()

                await callback_query.message.answer(
                    "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )
            else:
                await callback_query.message.answer(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )

        @self.dp.callback_query(F.data == 'start_all_tasks')
        async def process_start_all(callback_query: types.CallbackQuery):
            await callback_query.answer()

            started = 0
            for task_id in self.config.get('tasks', {}):
                if not self.active_tasks.get(task_id, False):
                    self.active_tasks[task_id] = True
                    self.config['tasks'][task_id]['active'] = True
                    await self.task_queue.put((task_id, self.config['tasks'][task_id]))
                    started += 1

            self.save_config()

            await callback_query.message.answer(
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {started} –∑–∞–¥–∞—á.",
                reply_markup=self.get_main_menu_keyboard()
            )

        @self.dp.callback_query(F.data == 'stop_all_tasks')
        async def process_stop_all(callback_query: types.CallbackQuery):
            await callback_query.answer()

            stopped = 0
            for task_id in self.active_tasks:
                if self.active_tasks[task_id]:
                    self.active_tasks[task_id] = False
                    self.config['tasks'][task_id]['active'] = False
                    stopped += 1

            self.save_config()

            await callback_query.message.answer(
                f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped} –∑–∞–¥–∞—á.",
                reply_markup=self.get_main_menu_keyboard()
            )

        @self.dp.callback_query(F.data == 'task_status')
        async def process_task_status(callback_query: types.CallbackQuery):
            await callback_query.answer()

            if not self.config.get('tasks'):
                await callback_query.message.answer(
                    "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return

            active_count = sum(1 for t in self.active_tasks.values() if t)
            total_count = len(self.config['tasks'])

            status_msg = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á</b>\n\n"
                f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
                f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {total_count - active_count}\n"
                f"üìå –í—Å–µ–≥–æ: {total_count}\n\n"
            )

            for task_id, task in self.config['tasks'].items():
                status = "üü¢" if self.active_tasks.get(task_id, False) else "üî¥"
                last_post = task.get('last_posted', '–µ—â–µ –Ω–µ –±—ã–ª–æ')
                status_msg += (
                    f"{status} @{task['group_username']} - "
                    f"–∏–Ω—Ç–µ—Ä–≤–∞–ª {task['interval']} —Å–µ–∫ - "
                    f"–ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_post}\n"
                )

            await callback_query.message.answer(
                status_msg,
                reply_markup=self.get_main_menu_keyboard()
            )

        @self.dp.callback_query(F.data == 'toggle_notifications')
        async def process_toggle_notifications(callback_query: types.CallbackQuery):
            await callback_query.answer()

            self.config['notifications_enabled'] = not self.config.get('notifications_enabled', True)
            self.save_config()

            status = "–≤–∫–ª—é—á–µ–Ω—ã" if self.config['notifications_enabled'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await callback_query.message.answer(
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.",
                reply_markup=self.get_main_menu_keyboard()
            )

        @self.dp.callback_query(F.data == 'back_to_main')
        async def process_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            await state.clear()
            await state.set_state(PosterStates.main_menu)
            await callback_query.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=self.get_main_menu_keyboard()
            )

    async def task_worker(self):
        while True:
            task_id, task_data = await self.task_queue.get()

            if task_id not in self.active_tasks or not self.active_tasks[task_id]:
                self.task_queue.task_done()
                continue

            try:
                jitter = random.randint(-10, 10)
                interval = max(5, task_data['interval'] + jitter)

                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ @{task_data['group_username']} (–æ–∂–∏–¥–∞–Ω–∏–µ {interval} —Å–µ–∫)")
                await asyncio.sleep(interval)

                success = await self.send_message_to_topic(task_data)

                if success:
                    self.config['tasks'][task_id]['last_posted'] = datetime.now().isoformat()
                    self.save_config()

                    if self.config.get('notifications_enabled', True):
                        try:
                            await self.bot.send_message(
                                self.config['user_id'],
                                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @{task_data['group_username']}\n"
                                f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ ~{task_data['interval']} —Å–µ–∫",
                                disable_notification=True
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                if task_id in self.active_tasks and self.active_tasks[task_id]:
                    await self.task_queue.put((task_id, task_data))

            except FloodWaitError as e:
                wait_time = e.seconds
                logger.warning(f"FloodWait: –∂–¥–µ–º {wait_time} —Å–µ–∫ –¥–ª—è @{task_data['group_username']}")
                await asyncio.sleep(wait_time)
                await self.task_queue.put((task_id, task_data))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @{task_data['group_username']}: {e}", exc_info=True)
                await asyncio.sleep(30)
                await self.task_queue.put((task_id, task_data))

            self.task_queue.task_done()

    async def send_message_to_topic(self, task_data: Dict) -> bool:
        try:
            entity = await self.telethon_client.get_entity(f"@{task_data['group_username']}")

            send_args = {
                'entity': entity,
                'message': task_data['message'],
                'parse_mode': 'html'
            }

            if task_data.get('topic_id', 0) != 0:
                send_args['reply_to'] = task_data['topic_id']

            if task_data.get('photo_path') and os.path.exists(task_data['photo_path']):
                result = await self.telethon_client.send_file(
                    file=task_data['photo_path'],
                    caption=task_data['message'],
                    parse_mode='html',
                    reply_to=task_data.get('topic_id', None)
                )
            else:
                result = await self.telethon_client.send_message(**send_args)

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @{task_data['group_username']} (ID: {result.id})")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @{task_data['group_username']}: {e}", exc_info=True)
            return False

    def generate_task_id(self) -> str:
        return f"task_{datetime.now().strftime('%Y%m%d%H%M%S')}_{random.randint(1000, 9999)}"

    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="list_tasks")
            ],
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="start_all_tasks"),
                InlineKeyboardButton(text="‚èπ –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="stop_all_tasks")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á", callback_data="task_status"),
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")
            ]
        ])

        def get_tasks_keyboard(self, tasks: Dict[str, Dict]) -> InlineKeyboardMarkup:
            buttons = []
            for task_id, task in tasks.items():
                status = "üü¢" if self.active_tasks.get(task_id, False) else "üî¥"
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{status} @{task['group_username']}",
                        callback_data=f"task_info_{task_id}"
                    )
                ])
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            return InlineKeyboardMarkup(inline_keyboard=buttons)

        async def confirm_single_add(self, user_id: int, state: FSMContext):
            data = await state.get_data()

            confirm_text = (
                f"üìå <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
                f"üë• <b>–ì—Ä—É–ø–ø–∞:</b> @{data['group_username']}\n"
                f"üìö <b>–¢–æ–ø–∏–∫:</b> {data.get('topic_name', '–ë–µ–∑ —Ç–æ–ø–∏–∫–∞')}\n"
                f"üîÑ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {data['interval']} —Å–µ–∫\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
                f"{data['message']}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏?"
            )

            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")
                ]
            ])

            await state.set_state(PosterStates.confirm_add)
            await self.bot.send_message(
                user_id,
                confirm_text,
                reply_markup=markup
            )

        @self.dp.callback_query(F.data == 'confirm_add', PosterStates.confirm_add)
        async def process_confirm_add(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            data = await state.get_data()

            try:
                task_id = self.generate_task_id()
                task_data = {
                    "group_username": data['group_username'],
                    "topic_id": data.get('topic_id', 0),
                    "topic_name": data.get('topic_name', "–ë–µ–∑ —Ç–æ–ø–∏–∫–∞"),
                    "message": data['message'],
                    "photo_path": data.get('photo_path'),
                    "interval": data['interval'],
                    "active": True,
                    "last_posted": None
                }

                if 'tasks' not in self.config:
                    self.config['tasks'] = {}
                self.config['tasks'][task_id] = task_data

                self.active_tasks[task_id] = True
                await self.task_queue.put((task_id, task_data))

                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è @{data['group_username']}")

                self.save_config()
                await state.clear()
                await state.set_state(PosterStates.main_menu)

                await callback_query.message.answer(
                    "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                    reply_markup=self.get_main_menu_keyboard()
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
                await callback_query.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=self.get_main_menu_keyboard()
                )

        @self.dp.message(PosterStates.uploading_photo)
        async def process_photo(message: types.Message, state: FSMContext):
            if message.photo:
                photo = message.photo[-1]
                file_id = photo.file_id
                file = await self.bot.get_file(file_id)
                file_path = file.file_path

                photo_name = f"photo_{datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"
                photo_path = os.path.join(PHOTOS_DIR, photo_name)

                await self.bot.download_file(file_path, photo_path)
                await state.update_data(photo_path=photo_path)

                await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            else:
                await state.update_data(photo_path=None)

            await state.set_state(PosterStates.setting_interval)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω–∏–º—É–º 5):"
            )

        @self.dp.callback_query(F.data == 'skip_photo', PosterStates.uploading_photo)
        async def process_skip_photo(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            await state.update_data(photo_path=None)
            await state.set_state(PosterStates.setting_interval)
            await callback_query.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω–∏–º—É–º 5):"
            )

        @self.dp.callback_query(F.data == 'cancel_add')
        @self.dp.callback_query(F.data == 'cancel_mass_add')
        async def process_cancel_add(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer()
            await state.clear()
            await state.set_state(PosterStates.main_menu)
            await callback_query.message.answer(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=self.get_main_menu_keyboard()
            )

if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–¥–µ—Å—å
    BOT_TOKEN = "7771036742:AAExM-ibsAhwee-lXe_bToJlZtLIwN1rBUE"

    bot = TelegramPosterBot(BOT_TOKEN)

    try:
        asyncio.run(bot.start())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)