# bot/handlers/auth.py - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

from aiogram import types, F, Router, Dispatcher, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from telethon.sync import TelegramClient
from telethon.errors import PhoneNumberInvalidError, PhoneCodeInvalidError, SessionPasswordNeededError
import os
import logging
import asyncio
import re

from bot.states.auth_states import AuthStates
from bot.keyboards.main_menu import get_auth_menu, get_main_menu
from utils.validators import is_valid_api_id, is_valid_api_hash
from utils.crypto import encrypt_data, decrypt_data
from config import SESSIONS_DIR


async def auth_start(message: types.Message | types.CallbackQuery, state: FSMContext, db, bot: Bot):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        await message.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
        message = message.message
    
    user_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    async with db.connect() as conn:
        cursor = await conn.execute(
            'SELECT * FROM sessions WHERE user_id = ? AND is_active = 1',
            (user_id,)
        )
        session = await cursor.fetchone()
    
    if session:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        await message.answer(
            "üîë –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (—Ç–µ–∫—É—â–∞—è –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞)\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏",
            reply_markup=get_auth_menu()
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await message.answer(
        "üîë –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram API\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã API ID –∏ API Hash –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://my.telegram.org\n"
        "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'\n"
        "4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏)\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ, –æ–Ω–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API ID
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AuthStates.waiting_api_id)


async def api_id_received(message: types.Message, state: FSMContext, db, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API ID"""
    api_id = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API ID
    if not is_valid_api_id(api_id):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(api_id=api_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API Hash
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash (32 —Å–∏–º–≤–æ–ª–∞):")
    await state.set_state(AuthStates.waiting_api_hash)


async def api_hash_received(message: types.Message, state: FSMContext, db, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API Hash"""
    api_hash = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API Hash
    if not is_valid_api_hash(api_hash):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API Hash. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API Hash –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(api_hash=api_hash)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):"
    )
    await state.set_state(AuthStates.waiting_phone)


async def phone_received(message: types.Message, state: FSMContext, db, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_pattern = r'^\+\d{10,15}$'
    if not re.match(phone_pattern, phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    api_id = int(data['api_id'])
    api_hash = data['api_hash']
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    user_session_dir = os.path.join(SESSIONS_DIR, str(message.from_user.id))
    os.makedirs(user_session_dir, exist_ok=True)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
    session_file = os.path.join(user_session_dir, f"user_{message.from_user.id}")
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        status_msg = await message.answer("‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram API...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon
        client = TelegramClient(session_file, api_id, api_hash)
        await client.connect()
        
        # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if await client.is_user_authorized():
            await status_msg.edit_text("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î
            user_id = message.from_user.id
            
            # –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            encrypted_api_hash = encrypt_data(api_hash)
            encrypted_phone = encrypt_data(phone)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            async with db.connect() as conn:
                await conn.execute(
                    '''
                    INSERT INTO sessions 
                    (user_id, api_id, api_hash, phone, session_file, is_active) 
                    VALUES (?, ?, ?, ?, ?, 1)
                    ''',
                    (user_id, api_id, encrypted_api_hash, encrypted_phone, str(session_file))
                )
                await conn.commit()
            
            await client.disconnect()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                "üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await status_msg.edit_text("üì≤ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω...")
        await client.send_code_request(phone)
        await client.disconnect()
        
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
        await message.answer(
            "üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
        )
        await state.set_state(AuthStates.waiting_code)
        
    except PhoneNumberInvalidError:
        await message.answer(
            "‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:"
        )
        await state.set_state(AuthStates.waiting_phone)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()


async def code_received(message: types.Message, state: FSMContext, db, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
    if not code.isdigit() or len(code) < 5:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–æ–±—ã—á–Ω–æ 5 —Ü–∏—Ñ—Ä).\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    api_id = int(data['api_id'])
    api_hash = data['api_hash']
    phone = data['phone']
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
    user_session_dir = os.path.join(SESSIONS_DIR, str(message.from_user.id))
    session_file = os.path.join(user_session_dir, f"user_{message.from_user.id}")
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        status_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon
        client = TelegramClient(session_file, api_id, api_hash)
        await client.connect()
        
        # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
        try:
            await client.sign_in(phone, code)
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await status_msg.edit_text("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î
            user_id = message.from_user.id
            
            # –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            encrypted_api_hash = encrypt_data(api_hash)
            encrypted_phone = encrypt_data(phone)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            async with db.connect() as conn:
                await conn.execute(
                    '''
                    INSERT INTO sessions 
                    (user_id, api_id, api_hash, phone, session_file, is_active) 
                    VALUES (?, ?, ?, ?, ?, 1)
                    ''',
                    (user_id, api_id, encrypted_api_hash, encrypted_phone, str(session_file))
                )
                await conn.commit()
            
            await client.disconnect()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                "üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            
        except PhoneCodeInvalidError:
            await status_msg.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑:")
            
        except SessionPasswordNeededError:
            # –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            await status_msg.edit_text(
                "üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
            )
            await state.set_state(AuthStates.waiting_2fa)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()


async def password_received(message: types.Message, state: FSMContext, db, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è 2FA"""
    password = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    api_id = int(data['api_id'])
    api_hash = data['api_hash']
    phone = data['phone']
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
    user_session_dir = os.path.join(SESSIONS_DIR, str(message.from_user.id))
    session_file = os.path.join(user_session_dir, f"user_{message.from_user.id}")
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        status_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon
        client = TelegramClient(session_file, api_id, api_hash)
        await client.connect()
        
        # –ü—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å 2FA
        try:
            await client.sign_in(password=password)
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await status_msg.edit_text("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î
            user_id = message.from_user.id
            
            # –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            encrypted_api_hash = encrypt_data(api_hash)
            encrypted_phone = encrypt_data(phone)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            async with db.connect() as conn:
                await conn.execute(
                    '''
                    INSERT INTO sessions 
                    (user_id, api_id, api_hash, phone, session_file, is_active) 
                    VALUES (?, ?, ?, ?, ?, 1)
                    ''',
                    (user_id, api_id, encrypted_api_hash, encrypted_phone, str(session_file))
                )
                await conn.commit()
            
            await client.disconnect()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                "üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            
        except Exception as e:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è 2FA: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()


async def check_auth_status(message: types.Message | types.CallbackQuery, state: FSMContext, db, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        await message.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
        message = message.message
    
    user_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    async with db.connect() as conn:
        cursor = await conn.execute(
            'SELECT * FROM sessions WHERE user_id = ? AND is_active = 1',
            (user_id,)
        )
        session = await cursor.fetchone()
    
    if not session:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=get_auth_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    api_id = session['api_id']
    api_hash = decrypt_data(session['api_hash'])
    session_file = session['session_file']
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon
        client = TelegramClient(session_file, api_id, api_hash)
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await client.is_user_authorized():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            await client.disconnect()
            
            await status_msg.edit_text(
                f"‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞!\n\n"
                f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {me.first_name} {me.last_name or ''}\n"
                f"üÜî Username: @{me.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üì± ID: {me.id}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥."
            )
        else:
            await client.disconnect()
            await status_msg.edit_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ."
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏: {str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
        )


def register_auth_handlers(dp: Dispatcher, db, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(lambda message, state: auth_start(message, state, db, bot), Command("auth"))
    
    # Callback –∑–∞–ø—Ä–æ—Å—ã
    dp.callback_query.register(lambda call, state: auth_start(call, state, db, bot), F.data == "auth:start")
    dp.callback_query.register(lambda call, state: check_auth_status(call, state, db, bot), F.data == "auth:status")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
    dp.message.register(lambda message, state: api_id_received(message, state, db, bot), AuthStates.waiting_api_id)
    dp.message.register(lambda message, state: api_hash_received(message, state, db, bot), AuthStates.waiting_api_hash)
    dp.message.register(lambda message, state: phone_received(message, state, db, bot), AuthStates.waiting_phone)
    dp.message.register(lambda message, state: code_received(message, state, db, bot), AuthStates.waiting_code)
    dp.message.register(lambda message, state: password_received(message, state, db, bot), AuthStates.waiting_2fa)
