"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –Ω–∞ –±–∞–∑–µ Aiogram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è userbot
"""
import asyncio
import logging
import datetime
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BotBlocked

from config import BOT_TOKEN, OWNER_ID, LOGS_PATH
from database import DatabaseManager
from scheduler import scheduler
from userbot import userbot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs(LOGS_PATH, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=f"{LOGS_PATH}/bot.log"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
dp = Dispatcher(bot, storage=storage)
db = DatabaseManager()

# CallbackData –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
menu_cd = CallbackData("show_menu", "level", "menu_id", "action")
task_cd = CallbackData("task", "action", "task_id")
user_cd = CallbackData("user", "action", "user_id")
chat_cd = CallbackData("chat", "action", "chat_id", "topic_id")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
class TaskStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    choosing_task_type = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    entering_message_text = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    choosing_source_chat = State()  # –í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    choosing_source_message = State()  # –í—ã–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    choosing_target_chat = State()  # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    choosing_topic = State()  # –í—ã–±–æ—Ä —Ç–æ–ø–∏–∫–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    choosing_schedule = State()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

class AdminStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
    adding_user = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setting_subscription_days = State()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    sending_broadcast = State()  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if user_id == OWNER_ID:
        return True
    
    user = db.get_user(user_id)
    return user and user.get('is_admin', False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
async def has_active_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    is_active, message = db.check_subscription(user_id)
    return is_active, message

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—é

def make_main_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data=menu_cd.new(level=1, menu_id=0, action="my_tasks")))
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=menu_cd.new(level=1, menu_id=0, action="add_task")))
    keyboard.add(InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=menu_cd.new(level=1, menu_id=0, action="profile")))
    keyboard.add(InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=menu_cd.new(level=1, menu_id=0, action="notifications")))
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=menu_cd.new(level=1, menu_id=0, action="stats")))
    keyboard.add(InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data=menu_cd.new(level=1, menu_id=0, action="help")))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if asyncio.get_event_loop().run_until_complete(is_admin(user_id)):
        keyboard.add(InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data=menu_cd.new(level=1, menu_id=0, action="admin_panel")))
    
    return keyboard

def make_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data=menu_cd.new(level=2, menu_id=0, action="manage_users")))
    keyboard.add(InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=menu_cd.new(level=2, menu_id=0, action="broadcast")))
    keyboard.add(InlineKeyboardButton("üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=menu_cd.new(level=2, menu_id=0, action="all_tasks")))
    keyboard.add(InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=menu_cd.new(level=2, menu_id=0, action="global_stats")))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=menu_cd.new(level=1, menu_id=0, action="main_menu")))
    return keyboard

def make_task_list_keyboard(tasks, page=0, items_per_page=5):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(tasks))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    for i in range(start_idx, end_idx):
        task = tasks[i]
        status = "‚úÖ" if task['is_active'] else "‚è∏"
        task_name = f"{status} {task['name'][:30]}"
        keyboard.add(InlineKeyboardButton(
            task_name, 
            callback_data=task_cd.new(action="view", task_id=task['id'])
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=menu_cd.new(level=1, menu_id=page-1, action="my_tasks_page")
        ))
    
    if end_idx < len(tasks):
        nav_buttons.append(InlineKeyboardButton(
            "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", 
            callback_data=menu_cd.new(level=1, menu_id=page+1, action="my_tasks_page")
        ))
    
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=menu_cd.new(level=1, menu_id=0, action="main_menu")))
    
    return keyboard

def make_task_keyboard(task_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π
    keyboard.row(
        InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=task_cd.new(action="start", task_id=task_id)),
        InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=task_cd.new(action="stop", task_id=task_id))
    )
    
    keyboard.row(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=task_cd.new(action="edit", task_id=task_id)),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=task_cd.new(action="delete", task_id=task_id))
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=menu_cd.new(level=1, menu_id=0, action="my_tasks")))
    
    return keyboard

def make_user_management_keyboard(users, page=0, items_per_page=5):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(users))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for i in range(start_idx, end_idx):
        user = users[i]
        status = "üü¢" if user['is_active'] else "üî¥"
        admin_badge = "üëë " if user['is_admin'] else ""
        user_text = f"{status} {admin_badge}{user['username'] or user['user_id']}"
        keyboard.add(InlineKeyboardButton(
            user_text, 
            callback_data=user_cd.new(action="manage", user_id=user['user_id'])
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=menu_cd.new(level=2, menu_id=page-1, action="users_page")
        ))
    
    if end_idx < len(users):
        nav_buttons.append(InlineKeyboardButton(
            "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", 
            callback_data=menu_cd.new(level=2, menu_id=page+1, action="users_page")
        ))
    
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=menu_cd.new(level=2, menu_id=0, action="add_user")))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=menu_cd.new(level=1, menu_id=0, action="admin_panel")))
    
    return keyboard

def make_user_manage_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    user = db.get_user(user_id)
    
    if user:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard.add(InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data=user_cd.new(action="subscription", user_id=user_id)))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
        admin_action = "remove_admin" if user.get('is_admin') else "make_admin"
        admin_text = "üîΩ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞" if user.get('is_admin') else "üîº –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º"
        keyboard.add(InlineKeyboardButton(admin_text, callback_data=user_cd.new(action=admin_action, user_id=user_id)))
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        block_action = "block" if user.get('is_active') else "unblock"
        block_text = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.get('is_active') else "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        keyboard.add(InlineKeyboardButton(block_text, callback_data=user_cd.new(action=block_action, user_id=user_id)))
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.add(InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=user_cd.new(action="tasks", user_id=user_id)))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=menu_cd.new(level=2, menu_id=0, action="manage_users")))
    
    return keyboard

def make_task_type_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞", callback_data="task_type:text"))
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="task_type:forward"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=menu_cd.new(level=1, menu_id=0, action="main_menu")))
    return keyboard

def make_schedule_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üïí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑", callback_data="schedule:once"))
    keyboard.add(InlineKeyboardButton("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="schedule:recurring"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=menu_cd.new(level=1, menu_id=0, action="my_tasks")))
    return keyboard

def make_notifications_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    user = db.get_user(user_id)
    success_notify = user.get('notify_success', True)
    error_notify = user.get('notify_error', True)
    
    success_text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: –í–ö–õ" if success_notify else "‚≠ï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: –í–´–ö–õ"
    error_text = "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö: –í–ö–õ" if error_notify else "‚≠ï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö: –í–´–ö–õ"
    
    keyboard.add(InlineKeyboardButton(success_text, callback_data="notify:success"))
    keyboard.add(InlineKeyboardButton(error_text, callback_data="notify:error"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=menu_cd.new(level=1, menu_id=0, action="main_menu")))
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = db.get_user(user_id)
    
    if not user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
        if user_id == OWNER_ID:
            db.add_user(user_id, username, is_admin=True)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: {user_id} ({username})")
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞!\n\n"
                "ü§ñ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not db.is_user_allowed(user_id):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} ({username})")
                await message.answer(
                    "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.add_user(user_id, username)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
            
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º –≤ Telegram.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
            )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.get('is_active'):
            await message.answer(
                "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. "
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
            f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_active, subscription_message = await has_active_subscription(user_id)
    if not is_active:
        await message.answer(subscription_message)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=make_main_keyboard(user_id)
    )

@dp.callback_query_handler(menu_cd.filter(action="main_menu"))
async def show_main_menu(callback: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=make_main_keyboard(user_id)
    )
    await callback.answer()

@dp.callback_query_handler(menu_cd.filter(action="my_tasks"))
async def show_my_tasks(callback: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_active, message = await has_active_subscription(user_id)
    if not is_active:
        await callback.message.edit_text(
            message + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=make_main_keyboard(user_id)
        )
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = db.get_user_tasks(user_id)
    
    if not tasks:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.",
            reply_markup=make_main_keyboard(user_id)
        )
    else:
        await callback.message.edit_text(
            f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}):\n"
            f"‚úÖ - –∞–∫—Ç–∏–≤–Ω–∞, ‚è∏ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=make_task_list_keyboard(tasks)
        )
    
    await callback.answer()

@dp.callback_query_handler(menu_cd.filter(action="my_tasks_page"))
async def show_my_tasks_page(callback: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    page = int(callback_data.get("menu_id", 0))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = db.get_user_tasks(user_id)
    
    await callback.message.edit_text(
        f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}):\n"
        f"‚úÖ - –∞–∫—Ç–∏–≤–Ω–∞, ‚è∏ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=make_task_list_keyboard(tasks, page)
    )
    
    await callback.answer()

@dp.callback_query_handler(task_cd.filter(action="view"))
async def view_task(callback: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    task_id = int(callback_data.get("task_id"))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = db.get_task(task_id)
    
    if not task or task['user_id'] != user_id:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.",
            reply_markup=make_main_keyboard(user_id)
        )
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if task['is_active'] else "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    task_type = "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞" if task['task_type'] == 'text' else "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    chat_info = await userbot.get_chat_info(task['target_chat_id'])
    chat_name = chat_info.get('title', str(task['target_chat_id']))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    topic_info = ""
    if task.get('topic_id'):
        topic = await userbot.get_topic_info(task['target_chat_id'], task['topic_id'])
        topic_info = f"\nüìë –¢–æ–ø–∏–∫: {topic.get('title', str(task['topic_id']))}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    schedule_info = "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: "
    if task['schedule_type'] == 'once':
        scheduled_time = datetime.datetime.fromisoformat(task['scheduled_time'])
        schedule_info += f"–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ {scheduled_time.strftime('%d.%m.%Y %H:%M')}"
    else:
        schedule_info += f"–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è ({task['schedule_interval']})"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    content_info = ""
    if task['task_type'] == 'text':
        text_preview = task['message_text'][:100] + "..." if len(task['message_text']) > 100 else task['message_text']
        content_info = f"üìù –¢–µ–∫—Å—Ç: {text_preview}"
    else:
        content_info = f"‚Ü©Ô∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑: {task['source_chat_id']}, —Å–æ–æ–±—â–µ–Ω–∏–µ #{task['source_message_id']}"
    
    next_run = task.get('next_run')
    next_run_info = ""
    if next_run:
        next_run_time = datetime.datetime.fromisoformat(next_run)
        next_run_info = f"\n‚è±Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime('%d.%m.%Y %H:%M')}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ö
    execution_info = f"\nüî¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {task.get('execution_count', 0)}"
    
    message_text = (
        f"üìã –ó–∞–¥–∞—á–∞ #{task_id}\n\n"
        f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {task['name']}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üîπ –¢–∏–ø: {task_type}\n"
        f"üîπ –ß–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {chat_name}{topic_info}\n"
        f"üîπ {schedule_info}{next_run_info}\n"
        f"üîπ {content_info}{execution_info}\n\n"
        f"–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=make_task_keyboard(task_id)
    )
    
    await callback.answer()

@dp.callback_query_handler(task_cd.filter(action="start"))
async def start_task(callback: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    task_id = int(callback_data.get("task_id"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_active, message = await has_active_subscription(user_id)
    if not is_active:
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = db.get_task(task_id)
    
    if not task or task['user_id'] != user_id:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    db.update_task_status(task_id, True)
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    scheduler.restart_task(task_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    await view_task(callback, {"task_id": task_id, "action": "view"})
    
    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞", show_alert=True)

@dp.callback_query_handler(task_cd.filter(action="stop"))
async def stop_task(callback: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    task_id = int(callback_data.get("task_id"))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = db.get_task(task_id)
    
    if not task or task['user_id'] != user_id:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    db.update_task_status(task_id, False)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    scheduler.stop_task(task_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    await view_task(callback, {"task_id": task_id, "action": "view"})
    
    await callback.answer("‚è∏ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", show_alert=True)

@dp.callback_query_handler(task_cd.filter(action="delete"))
async def delete_task_confirm(callback: types.CallbackQuery, callback_data: dict):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    task_id = int(callback_data.get("task_id"))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = db.get_task(task_id)
    
    if not task or task['user_id'] != user_id:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{task_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=task_cd.new(action="view", task_id=task_id))
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{task_id}?\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task['name']}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(startswith="confirm_delete:"))
async def delete_task(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = db.get_task(task_id)
    
    if not task or task['user_id'] != user_id:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    scheduler.remove_task(task_id)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.delete_task(task_id)
    
    logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    await show_my_tasks(callback, {})
    
    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)

@dp.callback_query_handler(menu_cd.filter(action="add_task"))
async def add_task_start(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_active, message = await has_active_subscription(user_id)
    if not is_active:
        await callback.message.edit_text(
            message + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=make_main_keyboard(user_id)
        )
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    await TaskStates.choosing_task_type.set()
    
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=make_task_type_keyboard()
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(startswith="task_type:"), state=TaskStates.choosing_task_type)
async def process_task_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    task_type = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –≤ FSM
    await state.update_data(task_type=task_type)
    
    if task_type == "text":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await TaskStates.entering_message_text.set()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
        
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown:\n"
            "**–∂–∏—Ä–Ω—ã–π** - –æ–∫—Ä—É–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–≤—É–º—è –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏\n"
            "*–∫—É—Ä—Å–∏–≤* - –æ–∫—Ä—É–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥–æ—á–∫–æ–π\n"
            "[—Å—Å—ã–ª–∫–∞](URL) - —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
            reply_markup=keyboard
        )
    elif task_type == "forward":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
        await TaskStates.choosing_source_chat.set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
        chats = await userbot.get_dialogs()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for chat in chats[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —á–∞—Ç–æ–≤
            keyboard.add(InlineKeyboardButton(
                chat['title'], 
                callback_data=f"source_chat:{chat['id']}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
        
        await callback.message.edit_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
    
    await callback.answer()

@dp.message_handler(state=TaskStates.entering_message_text)
async def process_message_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FSM
    await state.update_data(message_text=message.text, name=message.text[:30]+"...")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    try:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1
        )
    except Exception:
        pass
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    await TaskStates.choosing_target_chat.set()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
    chats = await userbot.get_dialogs()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for chat in chats[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —á–∞—Ç–æ–≤
        if chat['can_post']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard.add(InlineKeyboardButton(
                chat['title'], 
                callback_data=f"target_chat:{chat['id']}"
            ))
    
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
    
    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(Text(startswith="source_chat:"), state=TaskStates.choosing_source_chat)
async def process_source_chat(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    chat_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ FSM
    await state.update_data(source_chat_id=chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    messages = await userbot.get_chat_messages(chat_id, limit=10)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for msg in messages:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = msg.get('text', '–ú–µ–¥–∏–∞')[:30] + "..." if len(msg.get('text', '–ú–µ–¥–∏–∞')) > 30 else msg.get('text', '–ú–µ–¥–∏–∞')
        keyboard.add(InlineKeyboardButton(
            f"ID: {msg['id']} - {text}", 
            callback_data=f"source_message:{msg['id']}"
        ))
    
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_source_chat"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await TaskStates.choosing_source_message.set()
    
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(startswith="source_message:"), state=TaskStates.choosing_source_message)
async def process_source_message(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    message_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FSM
    await state.update_data(source_message_id=message_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é
    state_data = await state.get_data()
    source_chat_id = state_data.get('source_chat_id')
    message = await userbot.get_message(source_chat_id, message_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    msg_text = message.get('text', '–ú–µ–¥–∏–∞')
    task_name = msg_text[:30] + "..." if len(msg_text) > 30 else msg_text
    await state.update_data(name=task_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    await TaskStates.choosing_target_chat.set()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
    chats = await userbot.get_dialogs()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for chat in chats[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —á–∞—Ç–æ–≤
        if chat['can_post']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard.add(InlineKeyboardButton(
                chat['title'], 
                callback_data=f"target_chat:{chat['id']}"
            ))
    
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_source_message"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
    
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(startswith="target_chat:"), state=[TaskStates.choosing_target_chat])
async def process_target_chat(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
    chat_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ FSM
    await state.update_data(target_chat_id=chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫–∏ –≤ —á–∞—Ç–µ
    has_topics = await userbot.chat_has_topics(chat_id)
    
    if has_topics:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ø–∏–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ø–∏–∫–∞
        await TaskStates.choosing_topic.set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        topics = await userbot.get_topics(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–ø–∏–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        # –û–ø—Ü–∏—è "–ë–µ–∑ —Ç–æ–ø–∏–∫–∞" (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç)
        keyboard.add(InlineKeyboardButton(
            "üåê –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç (–±–µ–∑ —Ç–æ–ø–∏–∫–∞)", 
            callback_data="topic:0"
        ))
        
        for topic in topics:
            keyboard.add(InlineKeyboardButton(
                topic['title'], 
                callback_data=f"topic:{topic['id']}"
            ))
        
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_target_chat"))
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
        
        await callback.message.edit_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–ø–∏–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await TaskStates.choosing_schedule.set()
        
        await callback.message.edit_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=make_schedule_keyboard()
        )
    
    await callback.answer()

@dp.callback_query_handler(Text(startswith="topic:"), state=TaskStates.choosing_topic)
async def process_topic(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞"""
    topic_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–ø–∏–∫–∞ –≤ FSM (0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ —Ç–æ–ø–∏–∫–∞)
    await state.update_data(topic_id=topic_id if topic_id > 0 else None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    await TaskStates.choosing_schedule.set()
    
    await callback.message.edit_text(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=make_schedule_keyboard()
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(startswith="schedule:"), state=TaskStates.choosing_schedule)
async def process_schedule_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule_type = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ FSM
    await state.update_data(schedule_type=schedule_type)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
    
    if schedule_type == "once":
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.06.2025 14:30",
            reply_markup=keyboard
        )
    elif schedule_type == "recurring":
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "- –î–ª—è –º–∏–Ω—É—Ç: 10m (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)\n"
            "- –î–ª—è —á–∞—Å–æ–≤: 2h (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)\n"
            "- –î–ª—è –¥–Ω–µ–π: 1d (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å)\n"
            "- –î–ª—è –Ω–µ–¥–µ–ª—å: 1w (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30m –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
            reply_markup=keyboard
        )
    
    await callback.answer()

@dp.message_handler(state=TaskStates.choosing_schedule)
async def process_schedule_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    state_data = await state.get_data()
    schedule_type = state_data.get('schedule_type')
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    try:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1
        )
    except Exception:
        pass
    
    if schedule_type == "once":
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            scheduled_time = datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            if scheduled_time <= datetime.datetime.now():
                await message.answer(
                    "‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
            await state.update_data(scheduled_time=scheduled_time.isoformat())
            await state.update_data(schedule_interval=None)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
            return
    elif schedule_type == "recurring":
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        interval_text = message.text.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if not (interval_text[-1] in "mhdw" and interval_text[:-1].isdigit()):
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "
                "—á–∏—Å–ª–æ + –±—É–∫–≤–∞ (m, h, d, w). –ù–∞–ø—Ä–∏–º–µ—Ä: 30m"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        await state.update_data(schedule_interval=interval_text)
        await state.update_data(scheduled_time=datetime.datetime.now().isoformat())
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await create_task(message, state)

async def create_task(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    state_data = await state.get_data()
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        task_id = db.create_task(
            user_id=user_id,
            name=state_data.get('name', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'),
            task_type=state_data.get('task_type'),
            source_chat_id=state_data.get('source_chat_id'),
            source_message_id=state_data.get('source_message_id'),
            target_chat_id=state_data.get('target_chat_id'),
            topic_id=state_data.get('topic_id'),
            message_text=state_data.get('message_text'),
            schedule_type=state_data.get('schedule_type'),
            scheduled_time=state_data.get('scheduled_time'),
            schedule_interval=state_data.get('schedule_interval'),
            is_active=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_task(db.get_task(task_id))
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ #{task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.finish()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=menu_cd.new(level=1, menu_id=0, action="my_tasks")))
        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=menu_cd.new(level=1, menu_id=0, action="main_menu")))
        
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await message.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.finish()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=make_main_keyboard(user_id)
        )

@dp.callback_query_handler(Text(equals="cancel_task"), state="*")
async def cancel_task_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=make_main_keyboard(user_id)
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(equals="back_to_source_chat"), state=TaskStates.choosing_source_message)
async def back_to_source_chat(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞"""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
    await TaskStates.choosing_source_chat.set()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
    chats = await userbot.get_dialogs()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for chat in chats[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —á–∞—Ç–æ–≤
        keyboard.add(InlineKeyboardButton(
            chat['title'], 
            callback_data=f"source_chat:{chat['id']}"
        ))
    
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
    
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    
    await callback.answer()

@dp.callback_query_handler(Text(equals="back_to_source_message"), state=TaskStates.choosing_target_chat)
async def back_to_source_message(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    state_data = await state.get_data()
    source_chat_id = state_data.get('source_chat_id')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await TaskStates.choosing_source_message.set()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    messages = await userbot.get_chat_messages(source_chat_id, limit=10)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for msg in messages:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = msg.get('text', '–ú–µ–¥–∏–∞')[:30] + "..." if len(msg.get('text', '–ú–µ–¥–∏–∞')) > 30 else msg.get('text', '–ú–µ–¥–∏–∞')
        keyboard.add(InlineKeyboardButton(
            f"ID: {msg['id']} - {text}", 
            callback_data=f"source_message:{msg['id']}"
        ))
    
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_source_chat"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task"))
    
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )
    
    await callback.answer()

", callback_data="cancel_task"))
    
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    
    await callback.answer()