from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from config import OWNER_ID
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()
db = Database()
logger = logging.getLogger(__name__)


class SubscriptionStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_days = State()


@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
            [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subscriptions")],
            [InlineKeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_add_sub")]
        ]
    )
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)


@router.callback_query(F.data == "admin_users")
async def show_all_users(callback: types.CallbackQuery):
    try:
        users = db.get_all_users()
        if not users:
            await callback.message.edit_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            text += f"ID: {user[0]}\n"
            text += f"Username: @{user[1]}\n" if user[1] else ""
            text += f"–ò–º—è: {user[2]}\n"
            text += "–°—Ç–∞—Ç—É—Å: " + ("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if db.check_subscription(user[0]) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞") + "\n"
            text += f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user[4]}\n\n" if user[4] else ""

        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_users: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    finally:
        await callback.answer()


@router.callback_query(F.data == "admin_subscriptions")
async def manage_subscriptions(callback: types.CallbackQuery):
    try:
        users = db.get_all_users()
        text = "üîß –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"

        active_count = 0
        for user in users:
            if db.check_subscription(user[0]):
                text += f"ID: {user[0]}\n"
                text += f"Username: @{user[1]}\n" if user[1] else ""
                text += f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {user[4]}\n\n"
                active_count += 1

        if active_count == 0:
            text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"

        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_subscriptions: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
    finally:
        await callback.answer()


@router.callback_query(F.data == "admin_add_sub")
async def start_add_subscription(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]]
        )
    )
    await state.set_state(SubscriptionStates.waiting_for_user_id)
    await callback.answer()


@router.message(SubscriptionStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
        await state.set_state(SubscriptionStates.waiting_for_days)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.message(SubscriptionStates.waiting_for_days)
async def process_days(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data['user_id']
        days = int(message.text)

        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        if db.set_subscription(user_id, days):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏")

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    finally:
        await state.clear()


@router.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()