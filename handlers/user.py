from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database import Database
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from config import OWNER_ID
from datetime import datetime

router = Router()
db = Database()
logger = logging.getLogger(__name__)


class TaskStates(StatesGroup):
    waiting_for_chat = State()
    waiting_for_text = State()
    waiting_for_schedule = State()


@router.message(Command("start"))
async def start_command(message: types.Message):
    user = message.from_user
    db.add_user(user.id, user.username, user.full_name)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.",
        reply_markup=keyboard
    )


@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    help_text = (
        "üìö <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n"
        "‚ûï <b>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</b> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n"
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:</b>\n"
        "‚Ä¢ <code>hour=12;minute=0</code> - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00\n"
        "‚Ä¢ <code>day_of_week=1,3,5;hour=15;minute=30</code> - –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫, —á–µ—Ç–≤–µ—Ä–≥ –∏ —Å—É–±–±–æ—Ç—É –≤ 15:30\n"
        "‚Ä¢ <code>minute=*/30</code> - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ <code>hour=*/2;minute=0</code> - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</b> –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    await message.answer(help_text)


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: types.Message):
    user_id = message.from_user.id
    user_info = db.get_user(user_id)

    if user_info:
        is_subscribed = db.check_subscription(user_id)

        if is_subscribed:
            subscription_end = datetime.strptime(user_info[4], "%Y-%m-%d").strftime("%d.%m.%Y")
            status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_end}"
        else:
            status_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"ID: <code>{user_id}</code>\n"
            f"–ò–º—è: {user_info[2]}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {status_text}\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(db.get_user_tasks(user_id))}"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
            ]
        )

        await message.answer(profile_text, reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
@router.message(Command("tasks"))
async def my_tasks_command(message: types.Message):
    user_id = message.from_user.id
    tasks = db.get_user_tasks(user_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"

    for i, task in enumerate(tasks, 1):
        text += (
            f"<b>{i}. –ó–∞–¥–∞—á–∞ #{task[0]}</b>\n"
            f"–ß–∞—Ç: <code>{task[2]}</code>\n"
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>{task[6]}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if task[7] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="manage_tasks")]
        ]
    )

    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "manage_tasks")
async def manage_tasks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tasks = db.get_user_tasks(user_id)

    if not tasks:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for task in tasks:
        status = "‚úÖ" if task[7] else "‚ùå"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{status} –ó–∞–¥–∞—á–∞ #{task[0]}",
                callback_data=f"task_{task[0]}"
            )
        ])

    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_tasks")
    ])

    await callback.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("task_"))
async def task_actions(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = db.get_task(task_id)

    if not task:
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return

    task_info = (
        f"<b>–ó–∞–¥–∞—á–∞ #{task[0]}</b>\n\n"
        f"–ß–∞—Ç: <code>{task[2]}</code>\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: <code>{task[4][:50]}...</code>\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>{task[6]}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if task[7] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not task[7] else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å",
                    callback_data=f"toggle_{task[0]}"
                )
            ],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task[0]}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="manage_tasks")]
        ]
    )

    await callback.message.edit_text(task_info, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_"))
async def toggle_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = db.get_task(task_id)

    if not task:
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return

    new_status = not task[7]
    if db.update_task_status(task_id, new_status):
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await task_actions(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("delete_"))
async def delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])

    if db.delete_task(task_id):
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")


@router.callback_query(F.data == "back_to_tasks")
async def back_to_tasks(callback: types.CallbackQuery):
    message = callback.message
    await message.delete()
    await my_tasks_command(message)


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
@router.callback_query(F.data == "create_task")
async def create_task_start(message_or_callback):
    is_callback = isinstance(message_or_callback, types.CallbackQuery)

    if is_callback:
        callback = message_or_callback
        user_id = callback.from_user.id
        message = callback.message
        await callback.answer()
    else:
        message = message_or_callback
        user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not db.check_subscription(user_id) and user_id != OWNER_ID:
        text = "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]]
        )

        if is_callback:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
        return

    instruction_text = (
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "‚Ä¢ ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)\n"
        "‚Ä¢ Username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel)</i>"
    )

    if is_callback:
        await message.edit_text(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
            )
        )
    else:
        await message.answer(
            instruction_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
            )
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    state = FSMContext(user_id) if 'state' in globals() else None
    if state:
        await state.set_state(TaskStates.waiting_for_chat)


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://t.me/your_payment_bot")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ]
    )

    await callback.message.edit_text(
        "üí≥ <b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü - 500 —Ä—É–±.\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 1200 —Ä—É–±.\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 2000 —Ä—É–±.\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery):
    await callback.message.delete()
    await profile_command(callback.message)
    await callback.answer()


@router.callback_query(F.data == "cancel_task_creation")
async def cancel_task_creation(callback: types.CallbackQuery, state: FSMContext = None):
    if state:
        await state.clear()

    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()