from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database import Database
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from config import OWNER_ID
from datetime import datetime
from scheduler import add_to_scheduler
from telethon import TelegramClient
from config import API_ID, API_HASH, USERBOT_SESSION

router = Router()
db = Database()
logger = logging.getLogger(__name__)


class TaskStates(StatesGroup):
    waiting_for_chat = State()
    waiting_for_thread = State()
    waiting_for_text = State()
    waiting_for_schedule = State()


@router.message(Command("start"))
async def start_command(message: types.Message):
    user = message.from_user
    db.add_user(user.id, user.username, user.full_name)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.",
        reply_markup=keyboard
    )


@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    help_text = (
        "üìö <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n"
        "‚ûï <b>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</b> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n"
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</b> –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    await message.answer(help_text)


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: types.Message):
    user_id = message.from_user.id
    user_info = db.get_user(user_id)

    if user_info:
        is_subscribed = db.check_subscription(user_id)

        if is_subscribed:
            subscription_end = datetime.strptime(user_info[4], "%Y-%m-%d").strftime("%d.%m.%Y")
            status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_end}"
        else:
            status_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"ID: <code>{user_id}</code>\n"
            f"–ò–º—è: {user_info[2]}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {status_text}\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(db.get_user_tasks(user_id))}"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
            ]
        )

        await message.answer(profile_text, reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
@router.message(Command("tasks"))
async def my_tasks_command(message: types.Message):
    user_id = message.chat.id
    tasks = db.get_user_tasks(user_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"

    for i, task in enumerate(tasks, 1):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        interval_seconds = int(task[6])
        interval_text = format_interval(interval_seconds)

        text += (
            f"<b>{i}. –ó–∞–¥–∞—á–∞ #{task[0]}</b>\n"
            f"–ß–∞—Ç: <code>{task[2]}</code>\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if task[7] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="manage_tasks")]
        ]
    )

    await message.answer(text, reply_markup=keyboard)


def format_interval(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} {'–º–∏–Ω—É—Ç—É' if minutes == 1 else '–º–∏–Ω—É—Ç' if 2 <= minutes <= 4 else '–º–∏–Ω—É—Ç'}"
    else:
        hours = seconds // 3600
        return f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if 2 <= hours <= 4 else '—á–∞—Å–æ–≤'}"


@router.callback_query(F.data == "manage_tasks")
async def manage_tasks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tasks = db.get_user_tasks(user_id)

    if not tasks:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for task in tasks:
        status = "‚úÖ" if task[7] else "‚ùå"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{status} –ó–∞–¥–∞—á–∞ #{task[0]}",
                callback_data=f"task_{task[0]}"
            )
        ])

    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_tasks")
    ])

    await callback.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("task_"))
async def task_actions(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = db.get_task(task_id)

    if not task:
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return

    interval_seconds = int(task[6])
    interval_text = format_interval(interval_seconds)

    task_info = (
        f"<b>–ó–∞–¥–∞—á–∞ #{task[0]}</b>\n\n"
        f"–ß–∞—Ç: <code>{task[2]}</code>\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: <code>{task[4][:50]}...</code>\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if task[7] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not task[7] else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å",
                    callback_data=f"toggle_{task[0]}"
                )
            ],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task[0]}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="manage_tasks")]
        ]
    )

    await callback.message.edit_text(task_info, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_"))
async def toggle_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = db.get_task(task_id)

    if not task:
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return

    new_status = not task[7]
    if db.update_task_status(task_id, new_status):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await task_actions(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("delete_"))
async def delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])

    if db.delete_task(task_id):
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")


@router.callback_query(F.data == "back_to_tasks")
async def back_to_tasks(callback: types.CallbackQuery):
    message = callback.message
    await message.delete()
    await my_tasks_command(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –≤ —á–∞—Ç–µ
async def get_forum_topics(chat_id):
    try:
        client = TelegramClient(USERBOT_SESSION, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            logger.error("Client is not authorized")
            await client.disconnect()
            return []

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ username
        try:
            if not str(chat_id).startswith('@'):
                chat_id = int(chat_id)
        except (ValueError, TypeError):
            pass  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_entity = await client.get_entity(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
        if not hasattr(chat_entity, 'forum') or not chat_entity.forum:
            logger.info(f"Chat {chat_id} is not a forum")
            await client.disconnect()
            return []  # –≠—Ç–æ –Ω–µ —Ñ–æ—Ä—É–º

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–∞
        topics = await client.get_topics(chat_entity)

        result = []
        for topic in topics:
            if hasattr(topic, 'title') and hasattr(topic, 'id'):
                result.append({
                    'id': topic.id,
                    'title': topic.title
                })

        await client.disconnect()
        logger.info(f"Found {len(result)} topics in chat {chat_id}")
        return result
    except Exception as e:
        logger.error(f"Error getting forum topics: {e}")
        if 'client' in locals() and client:
            await client.disconnect()
        return []


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def create_task_cmd(message: types.Message, state: FSMContext):
    await create_task_start(message, state)


@router.callback_query(F.data == "create_task")
async def create_task_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await create_task_start(callback.message, state)


async def create_task_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not db.check_subscription(user_id) and user_id != OWNER_ID:
        text = "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]]
        )
        await message.answer(text, reply_markup=keyboard)
        return

    instruction_text = (
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "‚Ä¢ ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)\n"
        "‚Ä¢ Username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel)</i>"
    )

    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
    )

    await message.answer(instruction_text, reply_markup=cancel_kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_state(TaskStates.waiting_for_chat)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
@router.message(TaskStates.waiting_for_chat)
async def process_chat_id(message: types.Message, state: FSMContext):
    chat_id = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(chat_id=chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞
    wait_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —á–∞—Ç –∏ –∏—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ —á–∞—Ç–µ
    topics = await get_forum_topics(chat_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await wait_message.delete()

    if topics:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ø–∏–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for topic in topics[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö 10 —Ç–æ–ø–∏–∫–æ–≤
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=topic['title'],
                    callback_data=f"topic_{topic['id']}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", callback_data="topic_main")
        ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")
        ])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=keyboard)
        await state.set_state(TaskStates.waiting_for_thread)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–ø–∏–∫–æ–≤, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
        await state.update_data(thread_id=None)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º thread_id –≤ None

        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
            )
        )
        await state.set_state(TaskStates.waiting_for_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞
@router.callback_query(F.data.startswith("topic_"))
async def process_topic_selection(callback: types.CallbackQuery, state: FSMContext):
    topic_id_str = callback.data.split("_")[1]

    if topic_id_str == "main":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º thread_id –≤ None
        await state.update_data(thread_id=None)
    else:
        # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ç–æ–ø–∏–∫–∞
        topic_id = int(topic_id_str)
        await state.update_data(thread_id=topic_id)

    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
        )
    )

    await state.set_state(TaskStates.waiting_for_text)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(TaskStates.waiting_for_text)
async def process_message_text(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(message_text=message.text)

    schedule_info = (
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 20 - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥)\n"
        "‚Ä¢ 60 - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
        "‚Ä¢ 300 - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ 600 - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ 1800 - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)\n\n"
        "<i>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 1800 —Å–µ–∫—É–Ω–¥</i>"
    )

    await message.answer(
        schedule_info,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation")]]
        )
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(TaskStates.waiting_for_schedule)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(TaskStates.waiting_for_schedule)
async def process_schedule(message: types.Message, state: FSMContext):
    try:
        interval_seconds = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        MIN_INTERVAL = 20  # –º–∏–Ω–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥
        MAX_INTERVAL = 1801  # –º–∞–∫—Å–∏–º—É–º ~30 –º–∏–Ω—É—Ç

        if interval_seconds < MIN_INTERVAL:
            await message.answer(f"‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_INTERVAL} —Å–µ–∫—É–Ω–¥")
            return
        elif interval_seconds > MAX_INTERVAL:
            await message.answer(f"‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_INTERVAL} —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ 30 –º–∏–Ω—É—Ç)")
            return

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥)")
        return

    user_data = await state.get_data()
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    chat_id = user_data.get('chat_id')
    thread_id = user_data.get('thread_id')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    message_text = user_data.get('message_text')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    wait_message = await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        task_id = db.add_task(user_id, chat_id, thread_id, message_text, None, str(interval_seconds))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        success = await add_to_scheduler(task_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        await wait_message.delete()

        if success:
            interval_text = format_interval(interval_seconds)
            thread_info = f", —Ç–æ–ø–∏–∫ ID: {thread_id}" if thread_id else ""

            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
            message_preview = message_text[:50] + "..." if len(message_text) > 50 else message_text

            await message.answer(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–ß–∞—Ç: {chat_id}{thread_info}\n"
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
                f"–¢–µ–∫—Å—Ç: {message_preview}"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º. "
                "–ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


@router.callback_query(F.data == "cancel_task_creation")
async def cancel_task_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://t.me/lovelymaxing")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ]
    )

    await callback.message.edit_text(
        "üí≥ <b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
        "‚Ä¢ 7 –¥–Ω–µ–π - 99 —Ä—É–±.\n"
        "‚Ä¢ 14 –¥–Ω–µ–π - 169 —Ä—É–±.\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü - 299 —Ä—É–±.\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 799 —Ä—É–±.\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 1599 —Ä—É–±.\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery):
    await callback.message.delete()
    await profile_command(callback.message)