from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from config import OWNER_ID

router = Router()
db = Database()


# Keyboards
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )


def get_task_type_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="task_type_text")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–ª–∞—Ç—å", callback_data="task_type_forward")]
        ]
    )


# States
class TaskStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_chat = State()
    waiting_for_schedule = State()


# Handlers
@router.message(Command("start", "menu"))
async def cmd_start(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name)

    if message.from_user.id == OWNER_ID:
        await message.answer("üëë –ü—Ä–∏–≤–µ—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü!", reply_markup=get_main_menu())
    else:
        await message.answer("üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!", reply_markup=get_main_menu())


@router.message(F.text == "üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_user_tasks(message: types.Message):
    tasks = db.get_user_tasks(message.from_user.id)
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=get_main_menu())
        return

    text = "üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if task[7] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        text += f"ID: {task[0]}\n–ß–∞—Ç: {task[2]}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(text, reply_markup=get_main_menu())


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_menu(message: types.Message):
    if not db.check_subscription(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=get_task_type_menu()
    )


@router.callback_query(F.data.startswith("task_type_"))
async def process_task_type(callback: types.CallbackQuery, state: FSMContext):
    task_type = callback.data.split("_")[-1]
    await state.update_data(task_type=task_type)

    if task_type == "text":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    else:
        await callback.message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:")

    await state.set_state(TaskStates.waiting_for_content)
    await callback.answer()


@router.message(TaskStates.waiting_for_content)
async def process_task_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data["task_type"] == "text" and not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    await state.update_data(content=message.text or message.message_id)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ chat_id –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    await state.set_state(TaskStates.waiting_for_chat)


@router.message(TaskStates.waiting_for_chat)
async def process_task_chat(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    await state.update_data(chat_id=int(message.text))
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: day=1;hour=12;minute=0\n(–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ 12:00)")
    await state.set_state(TaskStates.waiting_for_schedule)


@router.message(TaskStates.waiting_for_schedule)
async def process_task_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        task_id = db.add_task(
            user_id=message.from_user.id,
            chat_id=data["chat_id"],
            thread_id=None,
            message_text=data["content"] if data["task_type"] == "text" else None,
            original_message_id=data["content"] if data["task_type"] == "forward" else None,
            schedule=message.text
        )
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_main_menu())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu())

    await state.clear()