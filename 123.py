import os
import sys
import io
import logging
import asyncio
import json
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ParseMode
from telethon import TelegramClient
from telethon.tl.functions.channels import GetForumTopicsRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import ChatAdminRequiredError, ChannelPrivateError

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
async def send_message_to_topic(task_data: Dict) -> bool:
    client = await create_telethon_client()
    success = False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        entity = await client.get_entity(f"@{task_data['group_username']}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        if task_data.get('photo_path') and os.path.exists(task_data['photo_path']):
            # –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ —É–∫–∞–∑–∞–Ω –∏ –æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
            if task_data.get('topic_id', 0) != 0:
                await client.send_file(
                    entity,
                    task_data['photo_path'],
                    caption=task_data['message'],
                    reply_to=task_data['topic_id'],
                    parse_mode='html'
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø—É –±–µ–∑ —Ç–æ–ø–∏–∫–∞
                await client.send_file(
                    entity,
                    task_data['photo_path'],
                    caption=task_data['message'],
                    parse_mode='html'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
            if task_data.get('topic_id', 0) != 0:
                await client.send_message(
                    entity,
                    task_data['message'],
                    reply_to=task_data['topic_id'],
                    parse_mode='html'
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø—É –±–µ–∑ —Ç–æ–ø–∏–∫–∞
                await client.send_message(
                    entity,
                    task_data['message'],
                    parse_mode='html'
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        task_data['last_posted'] = datetime.now().isoformat()
        success = True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if client.is_connected():
            await client.disconnect()

    return success


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"),
        InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="list_tasks")
    )
    keyboard.add(
        InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="start_all_tasks"),
        InlineKeyboardButton("‚èπ –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="stop_all_tasks")
    )
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á", callback_data="task_status"),
        InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")
    )
    keyboard.add(
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    return keyboard

# 2. –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

def toggle_notifications_status(config: Dict) -> Dict:
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if 'notifications_enabled' not in config:
        config['notifications_enabled'] = False
    else:
        config['notifications_enabled'] = not config['notifications_enabled']
    save_config(config)
    return config

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞
def get_topics_keyboard(topics: List[Dict]) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    for topic in topics:
        keyboard.add(InlineKeyboardButton(
            f"#{topic['id']} - {topic['title']}",
            callback_data=f"topic_{topic['id']}_{topic['title']}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
def get_tasks_keyboard(tasks: Dict[str, Dict]) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    for task_id, task_data in tasks.items():
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if task_id in active_tasks and active_tasks[task_id] else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        keyboard.add(InlineKeyboardButton(
            f"{status} - @{task_data['group_username']} - {task_data['topic_name']}",
            callback_data=f"edit_task_{task_id}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
def get_task_control_keyboard(task_id: str) -> InlineKeyboardMarkup:
    is_active = task_id in active_tasks and active_tasks[task_id]
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if is_active:
        keyboard.add(InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_task_{task_id}"))
    else:
        keyboard.add(InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"start_task_{task_id}"))
    
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"edit_message_{task_id}"),
        InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{task_id}"),
        InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"edit_interval_{task_id}"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_task_{task_id}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_tasks")
    )
    return keyboard


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    config = load_config()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message_handler(commands=['start'], state='*')
    async def cmd_start(message: types.Message, state: FSMContext):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
        config = load_config()
        if not config.get('user_id'):
            config['user_id'] = message.from_user.id
            save_config(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
        if message.from_user.id != config.get('user_id'):
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
        
        await state.finish()
        await PosterStates.main_menu.set()
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Poster Bot!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–æ–≤ Telegram.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    @dp.message_handler(commands=['help'], state='*')
    async def cmd_help(message: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
        config = load_config()
        if message.from_user.id != config.get('user_id'):
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
            
        await message.answer(
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Telegram Poster Bot</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'\n"
            "2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gifts_buy' –±–µ–∑ @)\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n"
            "4. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML)\n"
            "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥\n"
            "6. –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
            "7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:</b>\n"
            "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á' –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á\n\n"
            "<b>–í–∞–∂–Ω–æ:</b>\n"
            "‚Ä¢ –£ –≤–∞—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ –ö–ª–∏–µ–Ω—Ç Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n",
            parse_mode=ParseMode.HTML
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
    @dp.message_handler(commands=['cancel'], state='*')
    async def cmd_cancel(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
        config = load_config()
        if message.from_user.id != config.get('user_id'):
            return
            
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
            await PosterStates.main_menu.set()
            await message.answer(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )

    @dp.callback_query_handler(lambda c: c.data.startswith('use_without_topics_'), state='*')
    async def process_use_without_topics(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
        group_username = callback_query.data.replace('use_without_topics_', '')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(group_username=group_username, topic_id=0, topic_name="–ù–µ—Ç —Ç–æ–ø–∏–∫–∞")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è
        await PosterStates.entering_message.set()
        await bot.send_message(
            callback_query.from_user.id,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É @{group_username} –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"<b>–∂–∏—Ä–Ω—ã–π</b>\n"
            f"<i>–∫—É—Ä—Å–∏–≤</i>\n"
            f"<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
            f"<a href='http://example.com'>—Å—Å—ã–ª–∫–∞</a>\n"
            f"<code>–∫–æ–¥</code>\n"
            f"<pre>–±–ª–æ–∫ –∫–æ–¥–∞</pre>\n"
            f"<blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote>"
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
    @dp.callback_query_handler(lambda c: c.data == 'add_task', state=PosterStates.main_menu)
    async def process_add_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await PosterStates.waiting_for_group_link.set()
        await bot.send_message(
            callback_query.from_user.id,
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã (–±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä: gifts_buy)\n"
            "–í–∞–∂–Ω–æ: –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã."
        )

    @dp.callback_query_handler(lambda c: c.data == 'start_all_tasks', state='*')
    async def process_start_all_tasks(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})

        if not tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        started_count = 0
        already_running_count = 0

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task_id, task_data in tasks.items():
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if task_id in active_tasks and active_tasks[task_id]:
                already_running_count += 1
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config['tasks'][task_id]['active'] = True

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_tasks[task_id] = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            asyncio.create_task(run_task(task_id, task_data, bot))
            started_count += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_config(config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await bot.send_message(
            callback_query.from_user.id,
            f"üöÄ –ó–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {started_count}\n"
            f"‚ÑπÔ∏è –£–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∑–∞–¥–∞—á: {already_running_count}",
            reply_markup=get_main_menu_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == 'stop_all_tasks', state='*')
    async def process_stop_all_tasks(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})

        if not tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        stopped_count = 0
        already_stopped_count = 0

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task_id, task_data in tasks.items():
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if task_id not in active_tasks or not active_tasks[task_id]:
                already_stopped_count += 1
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config['tasks'][task_id]['active'] = False

            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_tasks[task_id] = False
            stopped_count += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_config(config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await bot.send_message(
            callback_query.from_user.id,
            f"‚èπ –ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {stopped_count}\n"
            f"‚ÑπÔ∏è –£–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {already_stopped_count}",
            reply_markup=get_main_menu_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == 'toggle_notifications', state='*')
    async def process_toggle_notifications(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        config = load_config()
        config = toggle_notifications_status(config)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_enabled = config.get('notifications_enabled', True)
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
        await bot.send_message(
            callback_query.from_user.id,
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}.\n\n"
            f"{'–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.' if notifications_enabled else '–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.'}",
            reply_markup=get_main_menu_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
    @dp.message_handler(state=PosterStates.waiting_for_group_link)
    async def process_group_link(message: types.Message, state: FSMContext):
        group_username = message.text.strip()

        # –£–±–∏—Ä–∞–µ–º @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if group_username.startswith('@'):
            group_username = group_username[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –≥—Ä—É–ø–ø—ã –Ω–µ –ø—É—Å—Ç–æ–µ
        if not group_username:
            await message.answer("–ò–º—è –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã:")
            return

        await message.answer(f"–ò—â–µ–º —Ç–æ–ø–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ @{group_username}...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        topics, error = await find_topics(group_username)

        if error or not topics:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É –±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤",
                                     callback_data=f"use_without_topics_{group_username}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_main")
            )

            await message.answer(
                f"–í –≥—Ä—É–ø–ø–µ @{group_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞?",
                reply_markup=keyboard
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(group_username=group_username)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        await PosterStates.selecting_topic.set()
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ @{group_username}.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫:",
            reply_markup=get_topics_keyboard(topics)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞
    @dp.callback_query_handler(lambda c: c.data.startswith('topic_'), state=PosterStates.selecting_topic)
    async def process_topic_selection(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –∏–∑ callback_data
        _, topic_id, *topic_name_parts = callback_query.data.split('_')
        topic_name = '_'.join(topic_name_parts) if topic_name_parts else f"–¢–æ–ø–∏–∫ #{topic_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(topic_id=int(topic_id), topic_name=topic_name)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è
        await PosterStates.entering_message.set()
        await bot.send_message(
            callback_query.from_user.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫.\n\n"
            "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "<b>–∂–∏—Ä–Ω—ã–π</b>\n"
            "<i>–∫—É—Ä—Å–∏–≤</i>\n"
            "<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
            "<a href='http://example.com'>—Å—Å—ã–ª–∫–∞</a>\n"
            "<code>–∫–æ–¥</code>\n"
            "<pre>–±–ª–æ–∫ –∫–æ–¥–∞</pre>\n"
            "<blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote>"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    @dp.message_handler(state=PosterStates.entering_message)
    async def process_message_text(message: types.Message, state: FSMContext):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(message=message.text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        await PosterStates.uploading_photo.set()
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
            )
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    @dp.message_handler(content_types=types.ContentType.PHOTO, state=PosterStates.uploading_photo)
    async def process_photo_upload(message: types.Message, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        task_id = generate_task_id()
        photo_filename = f"{task_id}.jpg"
        photo_path = os.path.join(PHOTOS_DIR, photo_filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await message.photo[-1].download(destination_file=photo_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(photo_path=photo_path, task_id=task_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        await PosterStates.setting_interval.set()
        await message.answer(
            "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 300 (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
    @dp.callback_query_handler(lambda c: c.data == 'skip_photo', state=PosterStates.uploading_photo)
    async def process_skip_photo(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–¥–∞—á–∏
        task_id = generate_task_id()
        await state.update_data(photo_path=None, task_id=task_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        await PosterStates.setting_interval.set()
        await bot.send_message(
            callback_query.from_user.id,
            "–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 300 (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    @dp.message_handler(state=PosterStates.setting_interval)
    async def process_interval(message: types.Message, state: FSMContext):
        try:
            interval = int(message.text.strip())
            if interval < 30:
                await message.answer(
                    "–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ 30:"
                )
                return
        except ValueError:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 30):"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(interval=interval)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_message = (
            f"<b>üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:</b>\n\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> @{data['group_username']}\n"
            f"<b>–¢–æ–ø–∏–∫:</b> {data['topic_name']} (ID: {data['topic_id']})\n"
            f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {data['interval']} —Å–µ–∫. ({data['interval'] // 60} –º–∏–Ω. {data['interval'] % 60} —Å–µ–∫.)\n"
            f"<b>–§–æ—Ç–æ:</b> {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if data.get('photo_path') else '‚ùå –ù–µ—Ç'}\n\n"
            f"<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            f"{data['message']}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_task"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await PosterStates.confirm_add.set()
        await message.answer(confirm_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data == 'confirm_task', state=PosterStates.confirm_add)
    async def process_confirm_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        task_id = data['task_id']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–¥–∞—á–∏
        task_data = {
            "group_username": data['group_username'],
            "topic_id": data['topic_id'],
            "topic_name": data['topic_name'],
            "message": data['message'],
            "photo_path": data['photo_path'],
            "interval": data['interval'],
            "active": False,
            "last_posted": None
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        if 'tasks' not in config:
            config['tasks'] = {}
        config['tasks'][task_id] = task_data
        save_config(config)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.finish()
        await PosterStates.main_menu.set()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—ë, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∑–∞–¥–∞—á—É.",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data == 'cancel_task', state=PosterStates.confirm_add)
    async def process_cancel_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        if data.get('photo_path') and os.path.exists(data['photo_path']):
            try:
                os.remove(data['photo_path'])
            except:
                pass
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.finish()
        await PosterStates.main_menu.set()
        
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
    @dp.callback_query_handler(lambda c: c.data == 'list_tasks', state='*')
    async def process_list_tasks(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if not tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await PosterStates.select_task_to_edit.set()
        await bot.send_message(
            callback_query.from_user.id,
            "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_tasks_keyboard(tasks)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @dp.callback_query_handler(lambda c: c.data.startswith('edit_task_'), state=PosterStates.select_task_to_edit)
    async def process_edit_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('edit_task_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task_id=task_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = tasks[task_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
        task_message = (
            f"<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:</b>\n\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> @{task_data['group_username']}\n"
            f"<b>–¢–æ–ø–∏–∫:</b> {task_data['topic_name']} (ID: {task_data['topic_id']})\n"
            f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {task_data['interval']} —Å–µ–∫. ({task_data['interval'] // 60} –º–∏–Ω. {task_data['interval'] % 60} —Å–µ–∫.)\n"
            f"<b>–§–æ—Ç–æ:</b> {'‚úÖ –ï—Å—Ç—å' if task_data.get('photo_path') else '‚ùå –ù–µ—Ç'}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if task_id in active_tasks and active_tasks[task_id] else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞:</b> {task_data.get('last_posted', '–ù–µ—Ç')} \n\n"
            f"<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            f"{task_data['message']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await bot.send_message(
            callback_query.from_user.id,
            task_message,
            reply_markup=get_task_control_keyboard(task_id),
            parse_mode=ParseMode.HTML
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data.startswith('start_task_'), state='*')
    async def process_start_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('start_task_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config['tasks'][task_id]['active'] = True
        save_config(config)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        task_data = tasks[task_id]
        active_tasks[task_id] = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(run_task(task_id, task_data, bot))
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É @{task_data['group_username']}, "
            f"—Ç–æ–ø–∏–∫ '{task_data['topic_name']}' –∫–∞–∂–¥—ã–µ {task_data['interval']} —Å–µ–∫—É–Ω–¥.",
            reply_markup=get_task_control_keyboard(task_id)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data.startswith('stop_task_'), state='*')
    async def process_stop_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('stop_task_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config['tasks'][task_id]['active'] = False
        save_config(config)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        active_tasks[task_id] = False
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚èπ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
            reply_markup=get_task_control_keyboard(task_id)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    @dp.callback_query_handler(lambda c: c.data.startswith('edit_message_'), state='*')
    async def process_edit_message(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('edit_message_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task_id=task_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ
        await PosterStates.entering_message.set()
        await bot.send_message(
            callback_query.from_user.id,
            f"<b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{tasks[task_id]['message']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            parse_mode=ParseMode.HTML
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    @dp.callback_query_handler(lambda c: c.data.startswith('edit_photo_'), state='*')
    async def process_edit_photo(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('edit_photo_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task_id=task_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        await PosterStates.uploading_photo.set()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if tasks[task_id].get('photo_path') and os.path.exists(tasks[task_id]['photo_path']):
            with open(tasks[task_id]['photo_path'], 'rb') as photo:
                await bot.send_photo(
                    callback_query.from_user.id,
                    photo,
                    caption="–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
                    )
                )
        else:
            await bot.send_message(
                callback_query.from_user.id,
                "–§–æ—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
                )
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    @dp.callback_query_handler(lambda c: c.data.startswith('edit_interval_'), state='*')
    async def process_edit_interval(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('edit_interval_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task_id=task_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        await PosterStates.setting_interval.set()
        await bot.send_message(
            callback_query.from_user.id,
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {tasks[task_id]['interval']} —Å–µ–∫.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–µ –º–µ–Ω–µ–µ 30):"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data.startswith('delete_task_'), state='*')
    async def process_delete_task(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('delete_task_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task_id=task_id)
        
        # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        await PosterStates.delete_confirmation.set()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{task_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{task_id}")
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –≥—Ä—É–ø–ø—ã @{tasks[task_id]['group_username']}, "
            f"—Ç–æ–ø–∏–∫ '{tasks[task_id]['topic_name']}'?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=keyboard
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_'), state=PosterStates.delete_confirmation)
    async def process_confirm_delete(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('confirm_delete_', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if task_id not in tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if task_id in active_tasks:
            active_tasks[task_id] = False
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if tasks[task_id].get('photo_path') and os.path.exists(tasks[task_id]['photo_path']):
            try:
                os.remove(tasks[task_id]['photo_path'])
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        del config['tasks'][task_id]
        save_config(config)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await state.finish()
        await PosterStates.main_menu.set()
        
        await bot.send_message(
            callback_query.from_user.id,
            "üóë –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    @dp.callback_query_handler(lambda c: c.data.startswith('cancel_delete_'), state=PosterStates.delete_confirmation)
    async def process_cancel_delete(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = callback_query.data.replace('cancel_delete_', '')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–¥–∞—á–∏
        await state.update_data(task_id=task_id)
        await bot.send_message(
            callback_query.from_user.id,
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_task_control_keyboard(task_id)
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á"
    @dp.callback_query_handler(lambda c: c.data == 'task_status', state='*')
    async def process_task_status(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        tasks = config.get('tasks', {})
        
        if not tasks:
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å–µ—Ö –∑–∞–¥–∞—á
        status_message = "<b>üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:</b>\n\n"
        
        for task_id, task_data in tasks.items():
            is_active = task_id in active_tasks and active_tasks[task_id]
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
            status_message += (
                f"<b>{status}</b>\n"
                f"üë• –ì—Ä—É–ø–ø–∞: @{task_data['group_username']}\n"
                f"üìå –¢–æ–ø–∏–∫: {task_data['topic_name']}\n"
                f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {task_data['interval']} —Å–µ–∫.\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {task_data.get('last_posted', '–ù–µ—Ç')}\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        await bot.send_message(
            callback_query.from_user.id,
            status_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
    @dp.callback_query_handler(lambda c: c.data == 'help', state='*')
    async def process_help(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help)
        await bot.send_message(
            callback_query.from_user.id,
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Telegram Poster Bot</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'\n"
            "2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gifts_buy' –±–µ–∑ @)\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n"
            "4. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML)\n"
            "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥\n"
            "6. –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
            "7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:</b>\n"
            "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á' –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á\n\n"
            "<b>–í–∞–∂–Ω–æ:</b>\n"
            "‚Ä¢ –£ –≤–∞—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ –ö–ª–∏–µ–Ω—Ç Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.callback_query_handler(lambda c: c.data == 'back_to_main', state='*')
    async def process_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
        
        await PosterStates.main_menu.set()
        await bot.send_message(
            callback_query.from_user.id,
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    config = load_config()
    for task_id, task_data in config.get('tasks', {}).items():
        if task_data.get('active', False):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks[task_id] = True
            asyncio.create_task(run_task(task_id, task_data, bot))
            logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è –≥—Ä—É–ø–ø—ã @{task_data['group_username']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    owner_id = config.get('user_id')
    if owner_id:
        try:
            await bot.send_message(
                owner_id,
                "ü§ñ Telegram Poster Bot –∑–∞–ø—É—â–µ–Ω!\n\n"
                "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=get_main_menu_keyboard()
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª–ª–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ Telegram Poster Bot...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        logging.error(traceback.format_exc())
